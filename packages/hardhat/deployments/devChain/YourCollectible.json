{
  "address": "0x1DB137930053EA5B941b1626229BB4B921fD474F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "institution",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AccreditationPerformed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        }
      ],
      "name": "AuctionAuthorizationRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        }
      ],
      "name": "AuctionAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AuctionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "integral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Integral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newListingFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "ListingFeePercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "transactionType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "TransactionRecord",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LISTING_FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "authorizeAuctionEnder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "priceInWei",
          "type": "uint256"
        }
      ],
      "name": "calculateListingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        }
      ],
      "name": "endAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccreditableNFTs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "tokenUri",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isAccredited",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "accreditedCount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "accreditedInstitutions",
              "type": "address[]"
            }
          ],
          "internalType": "struct YourCollectible.NftItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAccreditedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accreditedCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAuctions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "highestBid",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "highestBidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isroyalty",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "num",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidCount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "bidders",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct YourCollectible.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAuction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "highestBid",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "highestBidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isroyalty",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "num",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidCount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "bidders",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct YourCollectible.Auction",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAuthorizedAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorizedTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAuthorizedTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNftItem",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "tokenUri",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isAccredited",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "accreditedCount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "accreditedInstitutions",
              "type": "address[]"
            }
          ],
          "internalType": "struct YourCollectible.NftItem",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUser",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isAuthorizedForAuction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint96",
          "name": "royaltyFeeNumber",
          "type": "uint96"
        }
      ],
      "name": "mintItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAccredited",
          "type": "bool"
        }
      ],
      "name": "modiyAccredited",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "performAccreditation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_password",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_bio",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isAccrediting",
          "type": "bool"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "revokeAuctionAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newListingFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "setListingFeePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeesCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_assessUri",
          "type": "string"
        }
      ],
      "name": "updateUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "userName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "name": "verifyPwd",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b68a23a222c43bb22be30352375c6c8609df496bbc2f267bf1cf42f8bf7042a",
  "receipt": {
    "to": null,
    "from": "0xA8311e0e5742902444A83eb53d883CE4CBf4830e",
    "contractAddress": "0x1DB137930053EA5B941b1626229BB4B921fD474F",
    "transactionIndex": 0,
    "gasUsed": "5450611",
    "logsBloom": "0x
    "blockHash": "0x1b362a88f5a7e9c63683e47061a18b2a99a7b834dddef0436883eb3f2ef94f95",
    "transactionHash": "0x7b68a23a222c43bb22be30352375c6c8609df496bbc2f267bf1cf42f8bf7042a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 364,
        "transactionHash": "0x7b68a23a222c43bb22be30352375c6c8609df496bbc2f267bf1cf42f8bf7042a",
        "address": "0x1DB137930053EA5B941b1626229BB4B921fD474F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a8311e0e5742902444a83eb53d883ce4cbf4830e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1b362a88f5a7e9c63683e47061a18b2a99a7b834dddef0436883eb3f2ef94f95"
      }
    ],
    "blockNumber": 364,
    "cumulativeGasUsed": "5450611",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "188947ad2930485ddf507d1d9bf8f8d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"institution\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AccreditationPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"}],\"name\":\"AuctionAuthorizationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"}],\"name\":\"AuctionAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"integral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Integral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newListingFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ListingFeePercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"transactionType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionRecord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LISTING_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"authorizeAuctionEnder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"calculateListingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccreditableNFTs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isAccredited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accreditedCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accreditedInstitutions\",\"type\":\"address[]\"}],\"internalType\":\"struct YourCollectible.NftItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAccreditedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accreditedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isroyalty\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"bidders\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"internalType\":\"struct YourCollectible.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isroyalty\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"bidders\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"internalType\":\"struct YourCollectible.Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuthorizedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAuthorizedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNftItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isAccredited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accreditedCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accreditedInstitutions\",\"type\":\"address[]\"}],\"internalType\":\"struct YourCollectible.NftItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAuthorizedForAuction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumber\",\"type\":\"uint96\"}],\"name\":\"mintItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAccredited\",\"type\":\"bool\"}],\"name\":\"modiyAccredited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"performAccreditation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_bio\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isAccrediting\",\"type\":\"bool\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"revokeAuctionAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newListingFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setListingFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_assessUri\",\"type\":\"string\"}],\"name\":\"updateUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"verifyPwd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"createAuction(uint256,string,uint256,uint256)\":{\"details\":\"\\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u62cd\\u5356\",\"params\":{\"blocktime\":\"\\u62cd\\u5356\\u7ed3\\u675f\\u65f6\\u95f4\",\"startPrice\":\"\\u8d77\\u62cd\\u4ef7\\u683c\",\"tokenId\":\"NFT\\u7684Token ID\"}},\"endAuction(uint256,uint256)\":{\"details\":\"\\u7ed3\\u675f\\u62cd\\u5356\\u5e76\\u5b8c\\u6210\\u4ea4\\u6613\",\"params\":{\"tokenId\":\"\\u62cd\\u5356\\u7684NFT\\u7684Token ID\"}},\"getAllAuctions()\":{\"details\":\"\\u83b7\\u53d6\\u6240\\u6709\\u62cd\\u5356\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\",\"returns\":{\"_0\":\"\\u6240\\u6709\\u62cd\\u5356\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\\u6570\\u7ec4\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getAuction(uint256)\":{\"details\":\"\\u83b7\\u53d6\\u62cd\\u5356\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\",\"params\":{\"tokenId\":\"\\u62cd\\u5356\\u7684NFT\\u7684Token ID\"},\"returns\":{\"_0\":\"\\u62cd\\u5356\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"placeBid(uint256)\":{\"details\":\"\\u53c2\\u4e0e\\u62cd\\u5356\\u51fa\\u4ef7\",\"params\":{\"tokenId\":\"\\u62cd\\u5356\\u7684NFT\\u7684Token ID\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourCollectible.sol\":\"YourCollectible\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x93d24eea4e6ddbed53ef161567ae62bfd0c3aebb7b48f37e4dbeb7a937108866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/YourCollectible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\npragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\n\\ncontract YourCollectible is\\n    ERC721,\\n    ERC721Enumerable,\\n    ERC721URIStorage,\\n    Ownable,\\n    ReentrancyGuard,\\n    ERC721Royalty\\n{\\n\\n    //\\u8ffd\\u8e2a\\u548c\\u751f\\u6210\\u552f\\u4e00\\u7684ID\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdCounter; // \\u552f\\u4e00ID\\u8ba1\\u6570\\u5668\\n    Counters.Counter private _transactionCounter; // \\u4ea4\\u6613\\u987a\\u5e8f\\u8ba1\\u6570\\u5668\\n\\n    uint256 public totalFeesCollected; // \\u6536\\u96c6\\u7684\\u624b\\u7eed\\u8d39\\n\\n    //\\u5bc6\\u7801\\u52a0\\u5bc6\\n    function stringToBytes32(string memory source) \\n            internal\\n            pure\\n            returns (bytes32 result)\\n        {   // \\u901a\\u8fc7\\u8c03\\u7528keccak256\\u8ba1\\u7b97\\u5b57\\u7b26\\u4e32\\u7684hash\\u503c\\n            assembly {\\n                result := mload(add(source, 32)) // \\u901a\\u8fc7keccak256\\u8ba1\\u7b97\\u5b57\\u7b26\\u4e32\\u7684hash\\u503c\\n            }\\n        }\\n\\n    // \\u5c06bytes32\\u7c7b\\u578b\\u8f6c\\u6362\\u4e3a\\u5b57\\u7b26\\u4e32\\n    function bytes32ToString(bytes32 x) internal pure returns (string memory) { // \\u901a\\u8fc7keccak256\\u8ba1\\u7b97\\u5b57\\u7b26\\u4e32\\u7684hash\\u503c\\n        bytes memory bytesString = new bytes(32);\\n        uint256 charCount = 0;\\n        for (uint256 j = 0; j < 32; j++) {\\n            bytes1 char = bytes1(bytes32(uint256(x) * 2**(8 * j)));\\n            if (char != 0) {\\n                bytesString[charCount] = char;\\n                charCount++;\\n            }\\n        }\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint256 j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // \\u6bd4\\u8f83\\u4e24\\u4e2a\\u5b57\\u7b26\\u4e32\\u662f\\u5426\\u76f8\\u7b49\\n    function compareStrings(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    //\\u6bd4\\u8f83\\u4e24\\u4e2abytes32\\u7c7b\\u578b\\u7684\\u5b57\\u7b26\\u4e32\\n    function compareBytes32Strings(bytes32 a, bytes32 b) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    struct User {\\n        string name; // \\u7528\\u6237\\u540d\\n        bytes32 password; // \\u5bc6\\u7801\\n        address payable wallet; // \\u94b1\\u5305\\u5730\\u5740\\n        string bio; // \\u4e2a\\u4eba\\u7b80\\u4ecb\\n        bool isAccrediting; //\\u662f\\u5426\\u9274\\u5b9a\\u673a\\u6784\\n        uint256 integral; //\\u79ef\\u5206\\n        string assessUri; // \\u673a\\u6784\\u76f8\\u5173\\u4fe1\\u606f\\uff0c\\u673a\\u6784\\u7684\\u76f8\\u5173\\u8bc1\\u4e66\\n    }\\n\\n\\n    //accrediting \\u9274\\u5b9a\\u4fe1\\u606f\\n    struct Accrediting {\\n        string name;\\n        uint256 tokenId;\\n        string messages;\\n        address owner;\\n        uint256 time;\\n    }\\n\\n    // \\u7528\\u6237\\u6ce8\\u518c\\u529f\\u80fd\\n    mapping(address => User) private  _users; // \\u7528\\u6237\\u6620\\u5c04\\n    mapping(address => Accrediting) private _Accreditings;\\n    mapping(uint256 => Accrediting) private _AccreditById;\\n    // \\u9274\\u5b9a\\u4e8b\\u4ef6 \\u53c2\\u6570 tokenid institution \\u9274\\u5b9a\\u673a\\u6784\\u5730\\u5740 message \\u9274\\u5b9a\\u4fe1\\u606f\\n    event AccreditationPerformed(uint256 indexed tokenId, address indexed institution, string message, uint256 timestamp);\\n\\n    function registerUser(string memory _name, string memory _password, string memory _bio, bool _isAccrediting) public {\\n        require(bytes(_users[msg.sender].name).length == 0, \\\"User already registered\\\");\\n        _users[msg.sender] = User(_name, stringToBytes32(_password), payable(msg.sender), _bio, _isAccrediting, 0, \\\"\\\");\\n\\n    }\\n\\n    function getUser(address userAddress) public view returns (string memory,bytes32 ,string memory, uint256) {\\n        User memory user = _users[userAddress];\\n        return (user.name,user.password, user.bio, user.integral);\\n    }\\n\\n    //\\u7528\\u6237\\u767b\\u5f55\\n   function verifyPwd(address userAddress,string memory userName, string memory password) public view returns (bool, bool) {\\n        require(bytes(_users[userAddress].name).length != 0, \\\"User not registered\\\");\\n        \\n        User memory user = _users[userAddress];\\n        \\n        bool isNameValid = compareStrings(user.name, userName);\\n        bool isPwdValid = compareBytes32Strings(user.password, stringToBytes32(password));\\n\\n        return (isNameValid && isPwdValid, user.isAccrediting);\\n    }\\n\\n\\n    function updateUserInfo(string memory _assessUri) public {\\n        // \\u9274\\u5b9a\\u673a\\u6784\\u66f4\\u65b0\\u4fe1\\u606f\\n        require(_users[msg.sender].isAccrediting, \\\"Not an accrediting institution\\\");\\n        require(bytes(_assessUri).length > 0, \\\"Assess info cannot be empty\\\");\\n        _users[msg.sender].assessUri = _assessUri;\\n    }\\n\\n        //\\u67e5\\u770b\\u9274\\u5b9a\\u673a\\u6784\\u4fe1\\u606f\\n    function getUserMessage(address userAddress) public view  returns (string memory, string memory, uint256, string memory) {\\n        User memory user = _users[userAddress];\\n        require(user.isAccrediting, \\\"Not an accrediting institution\\\");\\n        return (user.name, user.bio, user.integral, user.assessUri);\\n    }\\n\\n    // NFT\\u6570\\u636e\\u7ed3\\u6784\\n    struct NftItem {\\n        uint256 tokenId;  // \\u552f\\u4e00ID\\n        uint256 price; // \\u4ef7\\u683c\\n        address payable seller; // \\u51fa\\u552e\\u8005\\n        bool isListed; // \\u662f\\u5426\\u4e0a\\u67b6\\n        string tokenUri; // NFT\\u7684URI \\u5305\\u542b\\u5bf9NFT\\u7684\\u5143\\u6570\\u636e\\uff08\\u76f8\\u5173\\u63cf\\u8ff0\\uff0c\\u5206\\u7c7b\\uff09\\n        bool isAccredited; // \\u662f\\u5426\\u5141\\u8bb8\\u88ab\\u9274\\u5b9a\\n        uint256 accreditedCount; // \\u88ab\\u9274\\u5b9a\\u6b21\\u6570\\n        address[] accreditedInstitutions; // \\u9274\\u5b9a\\u8be5NFT\\u7684\\u673a\\u6784\\u5217\\u8868\\n    }\\n\\n    mapping(uint256 => NftItem) private _idToNftItem; // NFT\\u6570\\u636e\\n    uint256[] private _listedTokenIds; // \\u4e0a\\u67b6\\u7684NFT\\u7684ID\\u5217\\u8868\\n    mapping(uint256 => uint256) private _tokenIdToListedIndex; // NFT\\u7684ID\\u5230\\u4e0a\\u67b6\\u5217\\u8868\\u7d22\\u5f15\\u7684\\u6620\\u5c04\\n\\n    uint256 public listingFeePercentage = 250; // 2.5%\\n    uint256 public constant MAX_LISTING_FEE_PERCENTAGE = 1000; // 10%\\n\\n    \\n    event ListingFeePercentageUpdated(uint256 newListingFeePercentage);\\n    event FeesWithdrawn(address indexed owner, uint256 amount);\\n    event RoyaltyPaid(uint256 transactionId, uint256 indexed tokenId, address indexed creator, uint256 amount, uint256 timestamp);\\n    event FeesReceived(address indexed sender, uint256 amount);\\n    // event Transfer( address indexed from,address indexed to,uint256 indexed tokenId,uint256 timestamp,  uint256 transactionId );\\n    event TransactionRecord(address indexed from,address indexed to, string transactionType,uint256 amount,uint256 timestamp,uint256 transactionId);\\n    //\\u79ef\\u5206\\u8bb0\\u5f55\\n    event Integral(address indexed sender, uint256 tokenId, uint256 integral, uint256 timestamp );\\n\\n    constructor() ERC721(\\\"YourCollectible\\\", \\\"ZJ\\\") {}\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"https://gateway.pinata.cloud/ipfs/\\\";\\n    }\\n\\n    function mintItem(address to, string memory uri, uint96 royaltyFeeNumber) public returns (uint256) {\\n        _tokenIdCounter.increment();\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, uri);\\n\\n        _setTokenRoyalty(tokenId, msg.sender, royaltyFeeNumber);\\n\\n        string memory completeTokenURI = string(abi.encodePacked(_baseURI(), uri));\\n\\n        _idToNftItem[tokenId] = NftItem({\\n            tokenId: tokenId,\\n            price: 0,\\n            seller: payable(msg.sender),\\n            isListed: false,\\n            tokenUri: completeTokenURI,\\n            isAccredited: false,\\n            accreditedCount: 0, //\\u88ab\\u9274\\u5b9a\\u6b21\\u6570\\n            accreditedInstitutions: new address[](0)\\n        });\\n\\n        return tokenId;\\n    }\\n\\n    //\\u8bbe\\u7f6e\\u9274\\u5b9a\\u72b6\\u6001\\uff0c\\u53ea\\u6709\\u9274\\u5b9a\\u72b6\\u6001\\u4e3ature\\u65f6\\uff0c\\u9274\\u5b9a\\u673a\\u6784\\u624d\\u53ef\\u4ee5\\u8fdb\\u884c\\u9274\\u5b9a\\n    function modiyAccredited(uint256 tokenId, bool isAccredited) public {\\n        require(ownerOf(tokenId) == msg.sender || isAuthorizedForAuction(tokenId, msg.sender), \\\"You are not the owner or authorized\\\");\\n        _idToNftItem[tokenId].isAccredited = isAccredited;\\n    }\\n\\n    //\\u901a\\u8fc7id\\u83b7\\u53d6\\u88ab\\u9274\\u5b9a\\u7684\\u6b21\\u6570\\n    function getAccreditedCount(uint256 tokenId) public view returns (uint256 accreditedCount) {\\n        return  _idToNftItem[tokenId].accreditedCount;\\n    }\\n\\n    // \\u83b7\\u53d6\\u6240\\u6709\\u53ef\\u88ab\\u9274\\u5b9a\\u7684NFT\\n    function getAccreditableNFTs() external view returns (NftItem[] memory) {\\n        uint256 totalTokens = _tokenIdCounter.current();//\\u83b7\\u53d6\\u5f53\\u524d\\u7684token\\u6570\\u91cf\\n        uint256 count = 0;//\\u521d\\u59cb\\u5316\\u6570\\u91cf\\n        //\\u904d\\u5386\\u6240\\u6709\\u7684token\\u627e\\u5230\\u6240\\u6709\\u53ef\\u88ab\\u9274\\u5b9a\\u7684NFT\\n        for (uint256 i = 1; i <= totalTokens; i++) {\\n            if (_idToNftItem[i].isAccredited) {\\n                count++;//\\u786e\\u5b9a\\u6570\\u7ec4\\u957f\\u5ea6\\n            }\\n        }\\n\\n        NftItem[] memory accreditableNFTs = new NftItem[](count);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 1; i <= totalTokens; i++) {\\n            if (_idToNftItem[i].isAccredited) {\\n                accreditableNFTs[index] = _idToNftItem[i];\\n                index++;\\n            }\\n        }\\n        return accreditableNFTs;\\n    }\\n\\n    // NFT\\u9274\\u5b9a\\u529f\\u80fd\\n    function performAccreditation(uint256 tokenId, string memory message) public {\\n        require(_users[msg.sender].isAccrediting, \\\"Only accrediting institutions can perform this action\\\");\\n        require(bytes(_users[msg.sender].assessUri).length > 0, \\\"Accreditation info must be completed\\\");\\n        require(_idToNftItem[tokenId].isAccredited, \\\"NFT is not set for accreditation\\\");\\n\\n        // \\u8bb0\\u5f55\\u9274\\u5b9a\\u673a\\u6784\\n        _idToNftItem[tokenId].accreditedInstitutions.push(msg.sender);\\n        _idToNftItem[tokenId].accreditedCount += 1; // \\u589e\\u52a0\\u9274\\u5b9a\\u6b21\\u6570\\n        //\\u6bcf\\u9274\\u5b9a\\u4e00\\u6b21\\u7ed9\\u4e881\\u79ef\\u5206\\u3002\\n        _users[msg.sender].integral += 1;\\n        emit Integral(msg.sender, tokenId, 1, block.timestamp);\\n        _Accreditings[msg.sender] = Accrediting(_users[msg.sender].name,tokenId, message,msg.sender, block.timestamp);\\n        _AccreditById[tokenId] = Accrediting(_users[msg.sender].name,tokenId, message,msg.sender, block.timestamp);\\n        emit AccreditationPerformed(tokenId, msg.sender, message, block.timestamp);\\n    }\\n\\n    function getNftItem(uint256 tokenId) public view returns (NftItem memory) { // \\u83b7\\u53d6NFT\\u6570\\u636e\\n        return _idToNftItem[tokenId];\\n    }\\n\\n    function setListingFeePercentage(uint256 _newListingFeePercentage) external onlyOwner { // \\u8bbe\\u7f6e\\u62cd\\u5356\\u624b\\u7eed\\u8d39\\u767e\\u5206\\u6bd4\\n        require(_newListingFeePercentage <= MAX_LISTING_FEE_PERCENTAGE, \\\"Exceeds maximum fee percentage\\\");\\n        listingFeePercentage = _newListingFeePercentage;\\n\\n        emit ListingFeePercentageUpdated(_newListingFeePercentage);\\n    }\\n\\n    function calculateListingFee(uint256 priceInWei) public view returns (uint256) { // \\u8ba1\\u7b97\\u62cd\\u5356\\u624b\\u7eed\\u8d39\\n        return (priceInWei * listingFeePercentage) / 10000;\\n    }\\n\\n    function withdrawFees() external onlyOwner nonReentrant { // \\u63d0\\u53d6\\u6240\\u6709\\u62cd\\u5356\\u624b\\u7eed\\u8d39\\n        uint256 amount = totalFeesCollected;\\n        require(amount > 0, \\\"No fees to withdraw\\\");\\n\\n        totalFeesCollected = 0;\\n\\n        (bool success, ) = owner().call{value: amount}(\\\"\\\");\\n        require(success, \\\"Failed to withdraw fees\\\");\\n\\n        emit FeesWithdrawn(owner(), amount);\\n    }\\n\\n    function _beforeTokenTransfer( // \\u91cd\\u5199ERC721\\u7684_beforeTokenTransfer\\u65b9\\u6cd5\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize); \\n    } \\n\\n    function _burn( // \\u9500\\u6bc1NFT\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721URIStorage, ERC721Royalty) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI( // \\u83b7\\u53d6NFT\\u7684\\u5143\\u6570\\u636e\\n        uint256 tokenId\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface( // \\u68c0\\u67e5\\u5408\\u7ea6\\u662f\\u5426\\u652f\\u6301\\u67d0\\u4e2a\\u63a5\\u53e3\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable, ERC721URIStorage, ERC721Royalty)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    // \\u5b9a\\u4e49\\u62cd\\u5356\\u7ed3\\u6784\\u4f53\\n    struct Auction {\\n        uint256 tokenId; // \\u62cd\\u5356\\u7684NFT\\u7684Token ID\\n        string uri; // NFT\\u7684\\u5143\\u6570\\u636e\\n        address payable seller; // \\u5356\\u5bb6\\u5730\\u5740\\n        uint256 startPrice; // \\u8d77\\u62cd\\u4ef7\\u683c\\n        uint256 highestBid; // \\u5f53\\u524d\\u6700\\u9ad8\\u51fa\\u4ef7\\n        address payable highestBidder; // \\u5f53\\u524d\\u6700\\u9ad8\\u51fa\\u4ef7\\u8005\\u7684\\u5730\\u5740\\n        uint256 endTime; // \\u62cd\\u5356\\u7ed3\\u675f\\u65f6\\u95f4\\uff08\\u65f6\\u95f4\\u6233\\uff09\\n        bool isActive; // \\u62cd\\u5356\\u662f\\u5426\\u4ecd\\u5728\\u8fdb\\u884c\\u4e2d\\n        bool isroyalty; // \\u662f\\u5426\\u6709\\u7248\\u7a0e\\n        uint256 num; // \\u53c2\\u4e0e\\u7ade\\u62cd\\u4eba\\u6570\\n        uint256 bidCount; // \\u7ade\\u4ef7\\u6b21\\u6570\\n        address[] bidders; // \\u53c2\\u4e0e\\u8005\\u5730\\u5740\\u5217\\u8868\\n        uint256 startTime;\\n    }\\n\\n    // \\u4f7f\\u7528\\u6620\\u5c04\\u5b58\\u50a8\\u6240\\u6709\\u62cd\\u5356\\uff0c\\u4ee5Token ID\\u4e3a\\u952e\\n    mapping(uint256 => Auction) private _auctions;\\n\\n    // \\u6388\\u6743\\u6620\\u5c04\\uff1atokenId => \\u88ab\\u6388\\u6743\\u5730\\u5740 => \\u662f\\u5426\\u6388\\u6743\\n    mapping(uint256 => mapping(address => bool)) private _auctionAuthorized;\\n\\n    // \\u6388\\u6743\\u5730\\u5740\\u5217\\u8868\\uff1atokenId => \\u6388\\u6743\\u5730\\u5740\\u6570\\u7ec4\\n    mapping(uint256 => address[]) private _authorizedAddresses;\\n    \\n    // \\u53cd\\u5411\\u6620\\u5c04\\uff1a\\u5730\\u5740 => \\u88ab\\u6388\\u6743\\u7684tokenId\\u6570\\u7ec4\\n    mapping(address => uint256[]) private _addressToAuthorizedTokenIds;\\n\\n    // \\u6388\\u6743\\u4e8b\\u4ef6\\n    event AuctionAuthorized(uint256 indexed tokenId, address indexed owner, address indexed authorized);\\n    event AuctionAuthorizationRevoked(uint256 indexed tokenId, address indexed owner, address indexed authorized);\\n\\n    // \\u6388\\u6743\\u7528\\u6237\\u7ed3\\u675f\\u62cd\\u5356\\u7684\\u6743\\u9650\\n    function authorizeAuctionEnder(uint256 tokenId, address user) public {\\n        require(ownerOf(tokenId) == msg.sender, \\\"Not the token owner\\\");\\n        require(user != address(0), \\\"Invalid user address\\\");\\n        require(!_auctionAuthorized[tokenId][user], \\\"Address already authorized\\\");\\n        _auctionAuthorized[tokenId][user] = true;\\n        _authorizedAddresses[tokenId].push(user); // \\u6dfb\\u52a0\\u5230\\u6388\\u6743\\u5730\\u5740\\u5217\\u8868\\n        _addressToAuthorizedTokenIds[user].push(tokenId); // \\u6dfb\\u52a0\\u5230\\u53cd\\u5411\\u6620\\u5c04\\n        emit AuctionAuthorized(tokenId, msg.sender, user);\\n    }\\n\\n    // \\u64a4\\u9500\\u7528\\u6237\\u7684\\u6388\\u6743\\n    function revokeAuctionAuthorization(uint256 tokenId, address user) public {\\n        require(ownerOf(tokenId) == msg.sender, \\\"Not the token owner\\\");\\n        require(user != address(0), \\\"Invalid user address\\\");\\n        _auctionAuthorized[tokenId][user] = false;\\n         // \\u4ece\\u6388\\u6743\\u5730\\u5740\\u5217\\u8868\\u4e2d\\u79fb\\u9664\\n        for (uint256 i = 0; i < _authorizedAddresses[tokenId].length; i++) {\\n            if (_authorizedAddresses[tokenId][i] == user) {\\n                _authorizedAddresses[tokenId][i] = _authorizedAddresses[tokenId][_authorizedAddresses[tokenId].length - 1];\\n                _authorizedAddresses[tokenId].pop();\\n                break;\\n            }\\n        }\\n        // \\u4ece\\u53cd\\u5411\\u6620\\u5c04\\u4e2d\\u79fb\\u9664\\n        for (uint256 i = 0; i < _addressToAuthorizedTokenIds[user].length; i++) {\\n            if (_addressToAuthorizedTokenIds[user][i] == tokenId) {\\n                _addressToAuthorizedTokenIds[user][i] = _addressToAuthorizedTokenIds[user][_addressToAuthorizedTokenIds[user].length - 1];\\n                _addressToAuthorizedTokenIds[user].pop();\\n                break;\\n            }\\n        }\\n        emit AuctionAuthorizationRevoked(tokenId, msg.sender, user);\\n    }\\n\\n    // \\u68c0\\u67e5\\u7528\\u6237\\u662f\\u5426\\u88ab\\u6388\\u6743\\n    function isAuthorizedForAuction(uint256 tokenId, address user) public view returns (bool) {\\n        return _auctionAuthorized[tokenId][user];\\n    }\\n\\n    // \\u83b7\\u53d6\\u7279\\u5b9a NFT \\u7684\\u6240\\u6709\\u6388\\u6743\\u5730\\u5740\\n    function getAuthorizedAddresses(uint256 tokenId) public view returns (address[] memory) {\\n        return _authorizedAddresses[tokenId];\\n    }\\n    \\n    // \\u83b7\\u53d6\\u7279\\u5b9a\\u5730\\u5740\\u88ab\\u6388\\u6743\\u7684\\u6240\\u6709 tokenId\\n    function getAuthorizedTokenIds(address user) public view returns (uint256[] memory) {\\n        return _addressToAuthorizedTokenIds[user];\\n    }\\n\\n    // \\u83b7\\u53d6\\u7279\\u5b9a\\u5730\\u5740\\u88ab\\u6388\\u6743\\u7684\\u6240\\u6709 tokenId\\n    function getAuthorizedTokenIds() public view returns (uint256[] memory) {\\n        return _addressToAuthorizedTokenIds[msg.sender];\\n    }\\n\\n    // \\u6e05\\u9664NFT\\u7684\\u6240\\u6709\\u6388\\u6743\\n    function _clearAuctionAuthorizations(uint256 tokenId) internal {\\n        address[] storage authorizedUsers = _authorizedAddresses[tokenId];\\n        for (uint256 i = 0; i < authorizedUsers.length; i++) {\\n            address user = authorizedUsers[i];\\n            _auctionAuthorized[tokenId][user] = false;\\n            \\n            // \\u4ece\\u53cd\\u5411\\u6620\\u5c04\\u4e2d\\u79fb\\u9664\\n            for (uint256 j = 0; j < _addressToAuthorizedTokenIds[user].length; j++) {\\n                if (_addressToAuthorizedTokenIds[user][j] == tokenId) {\\n                    _addressToAuthorizedTokenIds[user][j] = _addressToAuthorizedTokenIds[user][_addressToAuthorizedTokenIds[user].length - 1];\\n                    _addressToAuthorizedTokenIds[user].pop();\\n                    break;\\n                }\\n            }\\n        }\\n        delete _authorizedAddresses[tokenId];   \\n    }\\n    \\n    // \\u4e8b\\u4ef6\\uff0c\\u7528\\u4e8e\\u8bb0\\u5f55\\u62cd\\u5356\\u76f8\\u5173\\u6d3b\\u52a8\\n    //\\u521b\\u5efa\\u62cd\\u5356\\n    event AuctionCreated(uint256 indexed tokenId, address indexed seller, uint256 startPrice, uint256 endTime, uint256 startTime);\\n    //\\u7ade\\u4ef7 id \\u51fa\\u4ef7\\u8005 \\u91d1\\u989d \\n    event NewBid(uint256 indexed tokenId, address indexed bidder, uint256 amount,uint256 timestamp);\\n    // \\u7ade\\u62cd\\u7ed3\\u675f \\u8d62\\u5bb6 \\u91d1\\u989d\\n    event AuctionEnded(uint256 indexed tokenId, address indexed winner, uint256 amount,uint256 timestamp);\\n\\n    // \\u521b\\u5efa\\u62cd\\u5356\\u51fd\\u6570\\n    /**\\n     * @dev \\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u62cd\\u5356\\n     * @param tokenId NFT\\u7684Token ID\\n     * @param startPrice \\u8d77\\u62cd\\u4ef7\\u683c\\n     * @param blocktime \\u62cd\\u5356\\u7ed3\\u675f\\u65f6\\u95f4\\n     */\\n    function createAuction(uint256 tokenId,string memory uri, uint256 startPrice, uint256 blocktime) external payable {\\n    // \\u786e\\u4fdd\\u8c03\\u7528\\u8005\\u662fNFT\\u7684\\u5f53\\u524d\\u6301\\u6709\\u8005\\n    require(ownerOf(tokenId) == msg.sender || isAuthorizedForAuction(tokenId, msg.sender), \\\"You are not the owner or authorized\\\");\\n\\n    // \\u786e\\u4fdd\\u8be5NFT\\u5f53\\u524d\\u6ca1\\u6709\\u8fdb\\u884c\\u4e2d\\u7684\\u62cd\\u5356\\n    require(!_auctions[tokenId].isActive, \\\"Auction already active for this token\\\");\\n\\n    // \\u786e\\u4fdd\\u62cd\\u5356\\u6301\\u7eed\\u65f6\\u95f4\\u5408\\u6cd5\\n    require(blocktime > block.timestamp, \\\"Duration must be greater than 0\\\");\\n\\n    // \\u83b7\\u53d6\\u521d\\u59cb\\u521b\\u5efa\\u8005\\u548c\\u7248\\u7a0e\\u91d1\\u989d\\n    (address creator, ) = royaltyInfo(tokenId, startPrice);//uint256 royaltyAmount\\n\\n    //\\u8bbe\\u7f6e\\u521d\\u59cb\\u4e3a\\u65e0\\u7248\\u7a0e\\n    bool royalty = false;\\n\\n    // \\u5982\\u679c\\u521b\\u5efa\\u8005\\u4e0d\\u662fNFT\\u7684\\u521d\\u59cb\\u521b\\u5efa\\u8005\\uff0c\\u5219\\u9700\\u8981\\u652f\\u4ed8\\u7248\\u7a0e\\n    if (creator != msg.sender) {\\n       royalty = true;\\n    }\\n\\n    uint256 start = block.timestamp;\\n    // \\u521d\\u59cb\\u5316\\u62cd\\u5356\\u5e76\\u5b58\\u50a8\\u5230\\u6620\\u5c04\\u4e2d\\n    _auctions[tokenId] = Auction({\\n        tokenId: tokenId,\\n        uri: uri,\\n        seller: payable(msg.sender),\\n        startPrice: startPrice,\\n        highestBid: 0,\\n        highestBidder: payable(address(0)),\\n        endTime: blocktime,\\n        isActive: true,\\n        isroyalty: royalty, // \\u662f\\u5426\\u6709\\u7248\\u7a0e\\n        num: 0, // \\u7ade\\u62cd\\u521d\\u59cb\\u53c2\\u4e0e\\u4eba\\u6570\\u4e3a0\\n        bidCount: 0, // \\u7ade\\u4ef7\\u6b21\\u6570\\u521d\\u59cb\\u4e3a0\\n        bidders: new address[](0), // \\u53c2\\u4e0e\\u8005\\u5730\\u5740\\u5217\\u8868\\u521d\\u59cb\\u4e3a\\u7a7a\\n        startTime: start\\n    });\\n\\n    // \\u89e6\\u53d1\\u62cd\\u5356\\u521b\\u5efa\\u4e8b\\u4ef6\\n    emit AuctionCreated(tokenId, msg.sender, startPrice, blocktime, block.timestamp);\\n}\\n\\n\\n    // \\u7ade\\u6807\\u51fd\\u6570\\n    /**\\n     * @dev \\u53c2\\u4e0e\\u62cd\\u5356\\u51fa\\u4ef7\\n     * @param tokenId \\u62cd\\u5356\\u7684NFT\\u7684Token ID\\n     */\\n    function placeBid(uint256 tokenId) external payable {\\n        // \\u786e\\u4fdd\\u62cd\\u5356\\u4ecd\\u5728\\u8fdb\\u884c\\u4e2d\\n        require(_auctions[tokenId].isActive, \\\"Auction is not active\\\");\\n\\n        // \\u786e\\u4fdd\\u62cd\\u5356\\u6ca1\\u6709\\u7ed3\\u675f\\n        require(block.timestamp < _auctions[tokenId].endTime, \\\"Auction has ended\\\");\\n\\n        // \\u786e\\u4fdd\\u51fa\\u4ef7\\u9ad8\\u4e8e\\u8d77\\u62cd\\u4ef7\\n        require(msg.value > _auctions[tokenId].startPrice, \\\"Bid must be higher than start price\\\");\\n\\n        // \\u786e\\u4fdd\\u51fa\\u4ef7\\u9ad8\\u4e8e\\u5f53\\u524d\\u6700\\u9ad8\\u51fa\\u4ef7\\n        require(msg.value > _auctions[tokenId].highestBid, \\\"Bid must be higher than current highest bid\\\");\\n\\n        // \\u751f\\u6210\\u4ea4\\u6613ID\\n        _transactionCounter.increment();\\n        uint256 transactionId = _transactionCounter.current();\\n\\n        // \\u5982\\u679c\\u5df2\\u6709\\u6700\\u9ad8\\u51fa\\u4ef7\\uff0c\\u8fd4\\u8fd8\\u4e4b\\u524d\\u7684\\u7ade\\u6807\\u8005\\n        if (_auctions[tokenId].highestBidder != address(0)) {\\n            address previousBidder = _auctions[tokenId].highestBidder;\\n            uint256 previousBid = _auctions[tokenId].highestBid;\\n            \\n            // \\u8fd4\\u8fd8\\u4e4b\\u524d\\u7684\\u7ade\\u6807\\u8005\\n            (bool success, ) = previousBidder.call{value: previousBid}(\\\"\\\");\\n            require(success, \\\"Failed to refund previous bidder\\\");\\n            \\n            // \\u8bb0\\u5f55\\u9000\\u6b3e\\u4ea4\\u6613\\n            emit TransactionRecord(\\n                address(this),\\n                previousBidder,\\n                \\\"BidRefund\\\",\\n                previousBid,\\n                block.timestamp,\\n                transactionId\\n            );\\n        }\\n        // \\u66f4\\u65b0\\u62cd\\u5356\\u7684\\u6700\\u9ad8\\u51fa\\u4ef7\\u548c\\u7ade\\u6807\\u8005\\u4fe1\\u606f\\u4ee5\\u53ca\\u53c2\\u4e0e\\u4eba\\u6570\\n         _auctions[tokenId].highestBid = msg.value;\\n         _auctions[tokenId].highestBidder = payable(msg.sender);\\n        // \\u589e\\u52a0\\u7ade\\u4ef7\\u6b21\\u6570\\n        _auctions[tokenId].bidCount += 1;\\n\\n        // \\u5982\\u679c\\u51fa\\u4ef7\\u8005\\u662f\\u65b0\\u7684\\u53c2\\u4e0e\\u8005\\uff0c\\u5219\\u589e\\u52a0\\u53c2\\u4e0e\\u8005\\u4eba\\u6570\\u5e76\\u8bb0\\u5f55\\u5730\\u5740\\n        if (!isBidder(_auctions[tokenId].bidders, msg.sender)) {\\n            _auctions[tokenId].num += 1;\\n            _auctions[tokenId].bidders.push(msg.sender);\\n        }\\n           \\n            // _transactionCounter.increment();\\n              // \\u8bb0\\u5f55\\u65b0\\u7684\\u7ade\\u4ef7\\u4ea4\\u6613\\n        // emit Transfer(\\n        //     msg.sender,\\n        //     address(this),\\n        //     tokenId,\\n        //     block.timestamp,\\n        //     transactionId\\n        // );\\n        // \\u89e6\\u53d1\\u65b0\\u51fa\\u4ef7\\u4e8b\\u4ef6\\n        emit NewBid(tokenId, msg.sender, msg.value, block.timestamp); \\n    }\\n\\n    // \\u8f85\\u52a9\\u51fd\\u6570\\uff1a\\u68c0\\u67e5\\u5730\\u5740\\u662f\\u5426\\u5df2\\u7ecf\\u5728\\u53c2\\u4e0e\\u8005\\u5217\\u8868\\u4e2d\\n    function isBidder(address[] memory _bidders, address _bidder) private pure returns (bool) {\\n        for (uint256 i = 0; i < _bidders.length; i++) {\\n            if (_bidders[i] == _bidder) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // \\u7ed3\\u675f\\u62cd\\u5356\\u51fd\\u6570\\n    /**\\n     * @dev \\u7ed3\\u675f\\u62cd\\u5356\\u5e76\\u5b8c\\u6210\\u4ea4\\u6613\\n     * @param tokenId \\u62cd\\u5356\\u7684NFT\\u7684Token ID\\n     */\\n    // \\u4fee\\u6539\\u7ed3\\u675f\\u62cd\\u5356\\u51fd\\u6570\\n    function endAuction(uint256 tokenId, uint256 currentTime) external {\\n        require(_auctions[tokenId].isActive, \\\"Auction is not active\\\");\\n        require(\\n            currentTime >= _auctions[tokenId].endTime,\\n            //string(abi.encodePacked(\\\"Auction has not ended yet. Current time: \\\", uint2str(currentTime), \\\", End time: \\\", uint2str(_auctions[tokenId].endTime)))\\n            \\\"Auction has not ended yet\\\"\\n        );\\n        \\n        require(\\n            ownerOf(tokenId) == msg.sender || _auctionAuthorized[tokenId][msg.sender],\\n            \\\"Not authorized to end auction\\\"\\n        );\\n\\n        _auctions[tokenId].isActive = false;\\n\\n        if (_auctions[tokenId].highestBidder != address(0)) {\\n            uint256 highestBid = _auctions[tokenId].highestBid;\\n            uint256 sellerAmount = highestBid;\\n            if (_auctions[tokenId].isroyalty) {\\n                // \\u83b7\\u53d6\\u521d\\u59cb\\u521b\\u5efa\\u8005\\u548c\\u7248\\u7a0e\\u91d1\\u989d\\n                (address creator, uint256 royaltyAmount) = royaltyInfo(tokenId, highestBid);\\n                \\n                sellerAmount = sellerAmount - royaltyAmount;\\n\\n                if (royaltyAmount > 0) {\\n                    payable(creator).transfer(royaltyAmount);\\n                    _transactionCounter.increment();\\n                    emit TransactionRecord(\\n                        address(this),\\n                        creator,\\n                        \\\"RoyaltyPayment\\\",\\n                        royaltyAmount,\\n                        block.timestamp,\\n                        _transactionCounter.current()\\n                    );\\n                }\\n            }\\n            uint256 institutionFee = (highestBid * 10) / 100; // 10%opyright\\n            sellerAmount = sellerAmount - institutionFee;\\n\\n            // \\u5206\\u53d1\\u7ed9\\u9274\\u5b9a\\u673a\\u6784\\n            address[] memory institutions = _idToNftItem[tokenId].accreditedInstitutions;\\n            if (institutions.length > 0) {\\n                uint256 institutionShare = institutionFee / institutions.length;\\n                for (uint256 i = 0; i < institutions.length; i++) {\\n                    payable(institutions[i]).transfer(institutionShare);\\n                    // \\u8bb0\\u5f55\\u9274\\u5b9a\\u8d39\\u7528\\u652f\\u4ed8\\u4ea4\\u6613\\n                    _transactionCounter.increment();\\n                    emit TransactionRecord(\\n                        address(this),\\n                        institutions[i],\\n                        \\\"AccreditationFee\\\",\\n                        institutionShare,\\n                        block.timestamp,\\n                        _transactionCounter.current()\\n                    );\\n                }\\n            } else {\\n                // \\u5982\\u679c\\u6ca1\\u6709\\u9274\\u5b9a\\u673a\\u6784\\uff0c\\u8d39\\u7528\\u8fd4\\u8fd8\\u7ed9\\u5356\\u5bb6\\n                sellerAmount = sellerAmount + institutionFee;\\n            }\\n\\n            // \\u8f6c\\u8d26\\u7ed9\\u5356\\u5bb6\\n            _auctions[tokenId].seller.transfer(sellerAmount);\\n            // \\u8bb0\\u5f55\\u5356\\u5bb6\\u6536\\u6b3e\\u4ea4\\u6613\\n            _transactionCounter.increment();\\n            emit TransactionRecord(\\n                address(this),\\n                _auctions[tokenId].seller,\\n                \\\"AuctionSettlement\\\",\\n                sellerAmount,\\n                block.timestamp,\\n                _transactionCounter.current()\\n            );\\n\\n            // \\u5728\\u8f6c\\u79fbNFT\\u4e4b\\u524d\\u6e05\\u9664\\u6240\\u6709\\u6388\\u6743\\n            _clearAuctionAuthorizations(tokenId);\\n            \\n            // \\u8f6c\\u79fbNFT\\u6240\\u6709\\u6743\\u5e76\\u8bb0\\u5f55\\u4ea4\\u6613\\n            address from = _auctions[tokenId].seller;\\n            address to = _auctions[tokenId].highestBidder;\\n            _transfer(from, to, tokenId);\\n\\n            emit AuctionEnded(tokenId, _auctions[tokenId].highestBidder, sellerAmount, currentTime);\\n        } else {\\n            emit AuctionEnded(tokenId, address(0), 0, currentTime);\\n        }\\n    }\\n\\n    // \\u91cd\\u5199 _transfer \\u51fd\\u6570\\u4ee5\\u786e\\u4fdd\\u5728\\u8f6c\\u79fb\\u65f6\\u6e05\\u9664\\u6388\\u6743\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._transfer(from, to, tokenId);\\n        // \\u6e05\\u9664\\u8be5NFT\\u7684\\u6240\\u6709\\u6388\\u6743\\n        _clearAuctionAuthorizations(tokenId);\\n    }\\n\\n    // \\u67e5\\u770b\\u62cd\\u5356\\u4fe1\\u606f\\u51fd\\u6570\\n    /**\\n     * @dev \\u83b7\\u53d6\\u62cd\\u5356\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\\n     * @param tokenId \\u62cd\\u5356\\u7684NFT\\u7684Token ID\\n     * @return \\u62cd\\u5356\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\\n     */\\n    function getAuction(uint256 tokenId) external view returns (Auction memory) {\\n        return _auctions[tokenId];\\n    }\\n\\n\\n    // \\u83b7\\u53d6\\u6240\\u6709\\u62cd\\u5356\\u4fe1\\u606f\\u7684\\u51fd\\u6570\\n    /**\\n     * @dev \\u83b7\\u53d6\\u6240\\u6709\\u62cd\\u5356\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\\n     * @return \\u6240\\u6709\\u62cd\\u5356\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\\u6570\\u7ec4\\n     */\\n    function getAllAuctions() external view returns (Auction[] memory) {\\n        uint256 totalTokens = _tokenIdCounter.current();\\n        uint256 activeCount = 0;\\n\\n        // \\u904d\\u5386\\u6240\\u6709Token ID\\uff0c\\u68c0\\u67e5\\u662f\\u5426\\u6709\\u6d3b\\u8dc3\\u7684\\u62cd\\u5356\\n        for (uint256 i = 1; i <= totalTokens; i++) {\\n            if (_auctions[i].isActive) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // \\u521b\\u5efa\\u7ed3\\u679c\\u6570\\u7ec4\\n        Auction[] memory allAuctions = new Auction[](activeCount);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 1; i <= totalTokens; i++) {\\n            if (_auctions[i].isActive) {\\n                allAuctions[index] = _auctions[i];\\n                index++;\\n            }\\n        }\\n\\n        return allAuctions;\\n    }\\n\\n function getContractAddress() public view returns (address) {\\n    return address(this);\\n}\\n\\n}\",\"keccak256\":\"0x81820cb3fff73f86d52ea10da3ba4ee18641b709b6893532e744075464152625\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260fa6018553480156200001657600080fd5b506040518060400160405280600f81526020016e596f7572436f6c6c65637469626c6560881b815250604051806040016040528060028152602001612d2560f11b81525081600290816200006b91906200019d565b5060036200007a82826200019d565b5050506200009762000091620000a260201b60201c565b620000a6565b6001600e5562000269565b3390565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200012357607f821691505b6020821081036200014457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200019857600081815260208120601f850160051c81016020861015620001735750805b601f850160051c820191505b8181101562000194578281556001016200017f565b5050505b505050565b81516001600160401b03811115620001b957620001b9620000f8565b620001d181620001ca84546200010e565b846200014a565b602080601f831160018114620002095760008415620001f05750858301515b600019600386901b1c1916600185901b17855562000194565b600085815260208120601f198616915b828110156200023a5788860151825594840194600190910190840162000219565b5085821015620002595787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b615f6480620002796000396000f3fe6080604052600436106102ae5760003560e01c806368828489116101755780639ef1d46f116100dc578063cbd2bdfd11610095578063d956d18f1161006f578063d956d18f146108bc578063deb82ed9146108dc578063e985e9c5146108f2578063f2fde38b1461093b57600080fd5b8063cbd2bdfd1461083a578063d5809a111461085c578063d8be30fc1461088c57600080fd5b80639ef1d46f14610763578063a22cb46514610783578063b272f940146107a3578063b88d4fde146107c3578063bf06eda6146107e3578063c87b56dd1461081a57600080fd5b80638da5cb5b1161012e5780638da5cb5b146106bb5780638edb3390146106d957806395d89b41146106ec5780639640b49214610701578063997572ea1461072e5780639979ef451461075057600080fd5b806368828489146105dc5780636f1a0af5146105fc5780636f77926b1461062957806370a0823114610659578063715018a61461067957806378bd79351461068e57600080fd5b80632cd8bf8411610219578063476343ee116101d2578063476343ee1461053157806347afe4371461054657806349731a0f146105665780634f6ccce71461058657806360c6d8ae146105a65780636352211e146105bc57600080fd5b80632cd8bf841461047e5780632f745c591461049e57806332a2c5d0146104be5780633877248d146104d157806342842e0e146104f157806342b83cf51461051157600080fd5b80630a3f70091161026b5780630a3f7009146103a857806318160ddd146103c857806323b872dd146103dd57806328858720146103fd5780632a55205a1461041f5780632af356c21461045e57600080fd5b806301782f15146102b357806301ffc9a7146102d557806306fdde031461030a578063081812fc1461032c5780630888de3914610364578063095ea7b314610388575b600080fd5b3480156102bf57600080fd5b506102d36102ce3660046152c0565b61095b565b005b3480156102e157600080fd5b506102f56102f036600461531c565b610e20565b60405190151581526020015b60405180910390f35b34801561031657600080fd5b5061031f610e31565b6040516103019190615389565b34801561033857600080fd5b5061034c61034736600461539c565b610ec3565b6040516001600160a01b039091168152602001610301565b34801561037057600080fd5b5061037a60185481565b604051908152602001610301565b34801561039457600080fd5b506102d36103a33660046153d1565b610eea565b3480156103b457600080fd5b506102f56103c33660046153fb565b610fff565b3480156103d457600080fd5b50600a5461037a565b3480156103e957600080fd5b506102d36103f8366004615427565b61102a565b34801561040957600080fd5b5061041261105b565b6040516103019190615530565b34801561042b57600080fd5b5061043f61043a366004615585565b6112e9565b604080516001600160a01b039093168352602083019190915201610301565b34801561046a57600080fd5b506102d361047936600461539c565b611395565b34801561048a57600080fd5b5061037a61049936600461539c565b61142a565b3480156104aa57600080fd5b5061037a6104b93660046153d1565b611447565b3480156104ca57600080fd5b503061034c565b3480156104dd57600080fd5b5061037a6104ec3660046155a7565b6114dd565b3480156104fd57600080fd5b506102d361050c366004615427565b611632565b34801561051d57600080fd5b506102d361052c3660046153fb565b61164d565b34801561053d57600080fd5b506102d3611807565b34801561055257600080fd5b506102d3610561366004615585565b611962565b34801561057257600080fd5b506102d36105813660046153fb565b611f45565b34801561059257600080fd5b5061037a6105a136600461539c565b6122cc565b3480156105b257600080fd5b5061037a60115481565b3480156105c857600080fd5b5061034c6105d736600461539c565b61235f565b3480156105e857600080fd5b506102d36105f7366004615624565b6123bf565b34801561060857600080fd5b5061061c61061736600461539c565b612422565b6040516103019190615647565b34801561063557600080fd5b5061064961064436600461565a565b6125a5565b6040516103019493929190615675565b34801561066557600080fd5b5061037a61067436600461565a565b6127f6565b34801561068557600080fd5b506102d361287c565b34801561069a57600080fd5b506106ae6106a936600461539c565b61288e565b6040516103019190615790565b3480156106c757600080fd5b50600d546001600160a01b031661034c565b6102d36106e73660046157a3565b612a3d565b3480156106f857600080fd5b5061031f612d54565b34801561070d57600080fd5b5061072161071c36600461539c565b612d63565b60405161030191906157f9565b34801561073a57600080fd5b50610743612dcf565b604051610301919061580c565b6102d361075e36600461539c565b612e2f565b34801561076f57600080fd5b506102d361077e366004615850565b613258565b34801561078f57600080fd5b506102d361079e3660046158e8565b6133b0565b3480156107af57600080fd5b506107436107be36600461565a565b6133bb565b3480156107cf57600080fd5b506102d36107de366004615912565b613426565b3480156107ef57600080fd5b506108036107fe36600461598d565b61345e565b604080519215158352901515602083015201610301565b34801561082657600080fd5b5061031f61083536600461539c565b61372e565b34801561084657600080fd5b5061084f613739565b6040516103019190615a00565b34801561086857600080fd5b5061037a61087736600461539c565b60009081526015602052604090206005015490565b34801561089857600080fd5b506108ac6108a736600461565a565b6139e9565b6040516103019493929190615a55565b3480156108c857600080fd5b506102d36108d7366004615a9f565b613c8a565b3480156108e857600080fd5b5061037a6103e881565b3480156108fe57600080fd5b506102f561090d366004615ad3565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561094757600080fd5b506102d361095636600461565a565b613d59565b3360009081526012602052604090206004015460ff166109e05760405162461bcd60e51b815260206004820152603560248201527f4f6e6c79206163637265646974696e6720696e737469747574696f6e7320636160448201527437103832b93337b936903a3434b99030b1ba34b7b760591b60648201526084015b60405180910390fd5b33600090815260126020526040812060060180546109fd90615afd565b905011610a585760405162461bcd60e51b8152602060048201526024808201527f41636372656469746174696f6e20696e666f206d75737420626520636f6d706c604482015263195d195960e21b60648201526084016109d7565b60008281526015602052604090206004015460ff16610ab95760405162461bcd60e51b815260206004820181905260248201527f4e4654206973206e6f742073657420666f722061636372656469746174696f6e60448201526064016109d7565b600082815260156020908152604082206006810180546001818101835591855292842090920180546001600160a01b03191633179055848352600501805491929091610b06908490615b4d565b9091555050336000908152601260205260408120600501805460019290610b2e908490615b4d565b909155505060408051838152600160208201524281830152905133917fc424236d12197e1ec7bea17e53f7631b14e52d78ce30527c0337514923afe0e0919081900360600190a26040805160a0810182523360009081526012602052919091208054829190610b9c90615afd565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc890615afd565b8015610c155780601f10610bea57610100808354040283529160200191610c15565b820191906000526020600020905b815481529060010190602001808311610bf857829003601f168201915b50505091835250506020808201859052604080830185905233606084018190524260809094019390935260009283526013909152902081518190610c599082615bae565b506020820151600182015560408201516002820190610c789082615bae565b5060608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080909101516004909101556040805160a0810182523360009081526012602052919091208054829190610cd290615afd565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfe90615afd565b8015610d4b5780601f10610d2057610100808354040283529160200191610d4b565b820191906000526020600020905b815481529060010190602001808311610d2e57829003601f168201915b50505091835250506020808201859052604080830185905233606084015242608090930192909252600085815260149091522081518190610d8c9082615bae565b506020820151600182015560408201516002820190610dab9082615bae565b5060608201516003820180546001600160a01b0319166001600160a01b03909216919091179055608090910151600490910155604051339083907f663aef1797b13c8d11ad351eb974b24dfd1690b5aa6e3af8d11c7cca7fb5fea390610e149085904290615c6d565b60405180910390a35050565b6000610e2b82613dd2565b92915050565b606060028054610e4090615afd565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6c90615afd565b8015610eb95780601f10610e8e57610100808354040283529160200191610eb9565b820191906000526020600020905b815481529060010190602001808311610e9c57829003601f168201915b5050505050905090565b6000610ece82613ddd565b506000908152600660205260409020546001600160a01b031690565b6000610ef58261235f565b9050806001600160a01b0316836001600160a01b031603610f625760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016109d7565b336001600160a01b0382161480610f7e5750610f7e813361090d565b610ff05760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016109d7565b610ffa8383613e3c565b505050565b6000918252601a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6110343382613eaa565b6110505760405162461bcd60e51b81526004016109d790615c8f565b610ffa838383613f29565b60606000611068600f5490565b9050600060015b8281116110b05760008181526015602052604090206004015460ff161561109e578161109a81615cdc565b9250505b806110a881615cdc565b91505061106f565b506000816001600160401b038111156110cb576110cb615215565b60405190808252806020026020018201604052801561110457816020015b6110f16150b1565b8152602001906001900390816110e95790505b509050600060015b8481116112df5760008181526015602052604090206004015460ff16156112cd576000818152601560209081526040918290208251610100810184528154815260018201549281019290925260028101546001600160a01b03811693830193909352600160a01b90920460ff161515606082015260038201805491929160808401919061119890615afd565b80601f01602080910402602001604051908101604052809291908181526020018280546111c490615afd565b80156112115780601f106111e657610100808354040283529160200191611211565b820191906000526020600020905b8154815290600101906020018083116111f457829003601f168201915b505050505081526020016004820160009054906101000a900460ff16151515158152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561129857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161127a575b5050505050815250508383815181106112b3576112b3615cf5565b602002602001018190525081806112c990615cdc565b9250505b806112d781615cdc565b91505061110c565b5090949350505050565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b031692820192909252829161135e5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061137d906001600160601b031687615d0b565b6113879190615d22565b915196919550909350505050565b61139d613f3d565b6103e88111156113ef5760405162461bcd60e51b815260206004820152601e60248201527f45786365656473206d6178696d756d206665652070657263656e74616765000060448201526064016109d7565b60188190556040518181527f7b7b531d40c1aa89dac7360f225e5660c63799638af64655583d3ec191be11e29060200160405180910390a150565b60006127106018548361143d9190615d0b565b610e2b9190615d22565b6000611452836127f6565b82106114b45760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016109d7565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b60006114ed600f80546001019055565b60006114f8600f5490565b90506115048582613f97565b61150e8185613fb1565b61151981338561407c565b600061152361418a565b85604051602001611535929190615d44565b60408051808303601f19018152610100830182528483526000602080850182815233868601908152606087018481526080880186815260a0890186905260c089018690528751868152808601895260e08a01528a86526015909452959093208651815590516001820155915160028301805495511515600160a01b026001600160a81b03199096166001600160a01b039092169190911794909417909355915190935060038201906115e79082615bae565b5060a082015160048201805460ff191691151591909117905560c0820151600582015560e08201518051611625916006840191602090910190615103565b5092979650505050505050565b610ffa83838360405180602001604052806000815250613426565b336116578361235f565b6001600160a01b0316146116a35760405162461bcd60e51b81526020600482015260136024820152722737ba103a3432903a37b5b2b71037bbb732b960691b60448201526064016109d7565b6001600160a01b0381166116f05760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642075736572206164647265737360601b60448201526064016109d7565b6000828152601a602090815260408083206001600160a01b038516845290915290205460ff16156117635760405162461bcd60e51b815260206004820152601a60248201527f4164647265737320616c726561647920617574686f72697a656400000000000060448201526064016109d7565b6000828152601a602090815260408083206001600160a01b038516808552908352818420805460ff19166001908117909155868552601b8452828520805480830182559086528486200180546001600160a01b03191683179055818552601c8452828520805491820181558552928420909201859055519091339185917fff460b40c549c863c9b27df0d30952055e6a9d7ab0a5dfa776a5aca07a56e55b91a45050565b61180f613f3d565b6118176141aa565b6011548061185d5760405162461bcd60e51b81526020600482015260136024820152724e6f206665657320746f20776974686472617760681b60448201526064016109d7565b60006011819055600d546040516001600160a01b039091169083908381818185875af1925050503d80600081146118b0576040519150601f19603f3d011682016040523d82523d6000602084013e6118b5565b606091505b50509050806119065760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f207769746864726177206665657300000000000000000060448201526064016109d7565b600d546001600160a01b03166001600160a01b03167fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a8360405161194c91815260200190565b60405180910390a250506119606001600e55565b565b60008281526019602052604090206007015460ff166119bb5760405162461bcd60e51b815260206004820152601560248201527441756374696f6e206973206e6f742061637469766560581b60448201526064016109d7565b600082815260196020526040902060060154811015611a1c5760405162461bcd60e51b815260206004820152601960248201527f41756374696f6e20686173206e6f7420656e646564207965740000000000000060448201526064016109d7565b33611a268361235f565b6001600160a01b03161480611a5457506000828152601a6020908152604080832033845290915290205460ff165b611aa05760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420617574686f72697a656420746f20656e642061756374696f6e00000060448201526064016109d7565b600082815260196020526040902060078101805460ff19169055600501546001600160a01b031615611f0657600082815260196020526040902060048101546007909101548190610100900460ff1615611bca57600080611b0186856112e9565b9092509050611b108184615d73565b92508015611bc7576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611b4e573d6000803e3d6000fd5b50611b5d601080546001019055565b6001600160a01b03821630600080516020615eed8339815191528342611b8260105490565b604080516080808252600e908201526d149bde585b1d1e54185e5b595b9d60921b60a08201526020810194909452830191909152606082015260c00160405180910390a35b50505b60006064611bd984600a615d0b565b611be39190615d22565b9050611bef8183615d73565b600086815260156020908152604080832060060180548251818502810185019093528083529496509293909291830182828015611c5557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c37575b50505050509050600081511115611d8a576000815183611c759190615d22565b905060005b8251811015611d8357828181518110611c9557611c95615cf5565b60200260200101516001600160a01b03166108fc839081150290604051600060405180830381858888f19350505050158015611cd5573d6000803e3d6000fd5b50611ce4601080546001019055565b828181518110611cf657611cf6615cf5565b60200260200101516001600160a01b0316306001600160a01b0316600080516020615eed8339815191528442611d2b60105490565b6040805160808082526010908201526f41636372656469746174696f6e46656560801b60a08201526020810194909452830191909152606082015260c00160405180910390a380611d7b81615cdc565b915050611c7a565b5050611d97565b611d948284615b4d565b92505b6000868152601960205260408082206002015490516001600160a01b039091169185156108fc02918691818181858888f19350505050158015611dde573d6000803e3d6000fd5b50611ded601080546001019055565b6000868152601960205260409020600201546001600160a01b031630600080516020615eed8339815191528542611e2360105490565b60408051608080825260119082015270105d58dd1a5bdb94d95d1d1b195b595b9d607a1b60a08201526020810194909452830191909152606082015260c00160405180910390a3611e7386614203565b600086815260196020526040902060028101546005909101546001600160a01b039182169116611ea482828a613f29565b6000888152601960209081526040918290206005015482518881529182018a90526001600160a01b0316918a917fe9ba83469fc8ee4260dd274fd43b5a54f2df813ad21c4637d53084d1f3866b37910160405180910390a35050505050505050565b604080516000808252602082018490529184917fe9ba83469fc8ee4260dd274fd43b5a54f2df813ad21c4637d53084d1f3866b379101610e14565b5050565b33611f4f8361235f565b6001600160a01b031614611f9b5760405162461bcd60e51b81526020600482015260136024820152722737ba103a3432903a37b5b2b71037bbb732b960691b60448201526064016109d7565b6001600160a01b038116611fe85760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642075736572206164647265737360601b60448201526064016109d7565b6000828152601a602090815260408083206001600160a01b03851684529091528120805460ff191690555b6000838152601b6020526040902054811015612155576000838152601b6020526040902080546001600160a01b03841691908390811061205557612055615cf5565b6000918252602090912001546001600160a01b031603612143576000838152601b60205260409020805461208b90600190615d73565b8154811061209b5761209b615cf5565b6000918252602080832090910154858352601b909152604090912080546001600160a01b0390921691839081106120d4576120d4615cf5565b600091825260208083209190910180546001600160a01b0319166001600160a01b039490941693909317909255848152601b9091526040902080548061211c5761211c615d86565b600082815260209020810160001990810180546001600160a01b0319169055019055612155565b8061214d81615cdc565b915050612013565b5060005b6001600160a01b0382166000908152601c602052604090205481101561228f576001600160a01b0382166000908152601c602052604090208054849190839081106121a6576121a6615cf5565b90600052602060002001540361227d576001600160a01b0382166000908152601c6020526040902080546121dc90600190615d73565b815481106121ec576121ec615cf5565b9060005260206000200154601c6000846001600160a01b03166001600160a01b03168152602001908152602001600020828154811061222d5761222d615cf5565b60009182526020808320909101929092556001600160a01b0384168152601c9091526040902080548061226257612262615d86565b6001900381819060005260206000200160009055905561228f565b8061228781615cdc565b915050612159565b506040516001600160a01b03821690339084907fbb7a4ce7127a7634ffe548a0beabca6f4b99e9e1c9ad99ff9ade8dc94cd8317390600090a45050565b60006122d7600a5490565b821061233a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016109d7565b600a828154811061234d5761234d615cf5565b90600052602060002001549050919050565b6000818152600460205260408120546001600160a01b031680610e2b5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016109d7565b336123c98361235f565b6001600160a01b031614806123e357506123e38233610fff565b6123ff5760405162461bcd60e51b81526004016109d790615d9c565b600091825260156020526040909120600401805460ff1916911515919091179055565b61242a6150b1565b6000828152601560209081526040918290208251610100810184528154815260018201549281019290925260028101546001600160a01b03811693830193909352600160a01b90920460ff161515606082015260038201805491929160808401919061249590615afd565b80601f01602080910402602001604051908101604052809291908181526020018280546124c190615afd565b801561250e5780601f106124e35761010080835404028352916020019161250e565b820191906000526020600020905b8154815290600101906020018083116124f157829003601f168201915b505050505081526020016004820160009054906101000a900460ff16151515158152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561259557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612577575b5050505050815250509050919050565b60606000606060008060126000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060e00160405290816000820180546125ee90615afd565b80601f016020809104026020016040519081016040528092919081815260200182805461261a90615afd565b80156126675780601f1061263c57610100808354040283529160200191612667565b820191906000526020600020905b81548152906001019060200180831161264a57829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b031660408201526003820180546060909201916126a190615afd565b80601f01602080910402602001604051908101604052809291908181526020018280546126cd90615afd565b801561271a5780601f106126ef5761010080835404028352916020019161271a565b820191906000526020600020905b8154815290600101906020018083116126fd57829003601f168201915b5050509183525050600482015460ff16151560208201526005820154604082015260068201805460609092019161275090615afd565b80601f016020809104026020016040519081016040528092919081815260200182805461277c90615afd565b80156127c95780601f1061279e576101008083540402835291602001916127c9565b820191906000526020600020905b8154815290600101906020018083116127ac57829003601f168201915b50505091909252505081516020830151606084015160a090940151919a9099509297509550909350505050565b60006001600160a01b0382166128605760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016109d7565b506001600160a01b031660009081526005602052604090205490565b612884613f3d565b61196060006143cd565b612896615168565b60196000838152602001908152602001600020604051806101a0016040529081600082015481526020016001820180546128cf90615afd565b80601f01602080910402602001604051908101604052809291908181526020018280546128fb90615afd565b80156129485780601f1061291d57610100808354040283529160200191612948565b820191906000526020600020905b81548152906001019060200180831161292b57829003601f168201915b505050918352505060028201546001600160a01b0390811660208084019190915260038401546040808501919091526004850154606085015260058501549092166080840152600684015460a0840152600784015460ff808216151560c08601526101009182900416151560e08501526008850154908401526009840154610120840152600a84018054835181840281018401909452808452610140909401939091830182828015612a2357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612a05575b50505050508152602001600b820154815250509050919050565b33612a478561235f565b6001600160a01b03161480612a615750612a618433610fff565b612a7d5760405162461bcd60e51b81526004016109d790615d9c565b60008481526019602052604090206007015460ff1615612aed5760405162461bcd60e51b815260206004820152602560248201527f41756374696f6e20616c72656164792061637469766520666f722074686973206044820152643a37b5b2b760d91b60648201526084016109d7565b428111612b3c5760405162461bcd60e51b815260206004820152601f60248201527f4475726174696f6e206d7573742062652067726561746572207468616e20300060448201526064016109d7565b6000612b4885846112e9565b50905060006001600160a01b0382163314612b61575060015b6000429050604051806101a00160405280888152602001878152602001336001600160a01b031681526020018681526020016000815260200160006001600160a01b031681526020018581526020016001151581526020018315158152602001600081526020016000815260200160006001600160401b03811115612be857612be8615215565b604051908082528060200260200182016040528015612c11578160200160208202803683370190505b50815260209081018390526000898152601982526040902082518155908201516001820190612c409082615bae565b5060408201516002820180546001600160a01b039283166001600160a01b031991821617909155606084015160038401556080840151600484015560a084015160058401805491909316911617905560c0820151600682015560e08201516007820180546101008086015115150261ff00199315159390931661ffff1990911617919091179055610120820151600882015561014082015160098201556101608201518051612cf991600a840191602090910190615103565b506101809190910151600b90910155604080518681526020810186905242818301529051339189917f05f9bf100dd0ca9f37f08e0526690286d357ed7d6c5a4ac29730440b6e2dfd629181900360600190a350505050505050565b606060038054610e4090615afd565b6000818152601b6020908152604091829020805483518184028101840190945280845260609392830182828015612dc357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612da5575b50505050509050919050565b336000908152601c6020908152604091829020805483518184028101840190945280845260609392830182828015610eb957602002820191906000526020600020905b815481526020019060010190808311612e12575050505050905090565b60008181526019602052604090206007015460ff16612e885760405162461bcd60e51b815260206004820152601560248201527441756374696f6e206973206e6f742061637469766560581b60448201526064016109d7565b6000818152601960205260409020600601544210612edc5760405162461bcd60e51b8152602060048201526011602482015270105d58dd1a5bdb881a185cc8195b991959607a1b60448201526064016109d7565b6000818152601960205260409020600301543411612f485760405162461bcd60e51b815260206004820152602360248201527f426964206d75737420626520686967686572207468616e20737461727420707260448201526269636560e81b60648201526084016109d7565b6000818152601960205260409020600401543411612fbc5760405162461bcd60e51b815260206004820152602b60248201527f426964206d75737420626520686967686572207468616e2063757272656e742060448201526a1a1a59da195cdd08189a5960aa1b60648201526084016109d7565b612fca601080546001019055565b6000612fd560105490565b6000838152601960205260409020600501549091506001600160a01b03161561311257600082815260196020526040808220600581015460049091015491516001600160a01b039091169290839083908381818185875af1925050503d806000811461305d576040519150601f19603f3d011682016040523d82523d6000602084013e613062565b606091505b50509050806130b35760405162461bcd60e51b815260206004820181905260248201527f4661696c656420746f20726566756e642070726576696f75732062696464657260448201526064016109d7565b60408051608080825260099082015268109a591499599d5b9960ba1b60a08201526020810184905242818301526060810186905290516001600160a01b038516913091600080516020615eed8339815191529181900360c00190a35050505b60008281526019602052604081203460048201556005810180546001600160a01b0319163317905560090180546001929061314e908490615b4d565b9091555050600082815260196020908152604091829020600a0180548351818402810184019094528084526131c293928301828280156131b757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613199575b50505050503361441f565b61321f5760008281526019602052604081206008018054600192906131e8908490615b4d565b909155505060008281526019602090815260408220600a01805460018101825590835291200180546001600160a01b031916331790555b60408051348152426020820152339184917fcde18333b910a25ba5421e992ecee5c314e557346e94ab2ab424658bbb3707e69101610e14565b336000908152601260205260409020805461327290615afd565b1590506132c15760405162461bcd60e51b815260206004820152601760248201527f5573657220616c7265616479207265676973746572656400000000000000000060448201526064016109d7565b6040518060e001604052808581526020016132dd856020015190565b8152336020808301829052604080840187905285151560608501526000608085018190528151808401835281815260a0909501949094529183526012905290208151819061332b9082615bae565b506020820151600182015560408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201906133709082615bae565b50608082015160048201805460ff191691151591909117905560a0820151600582015560c082015160068201906133a79082615bae565b50505050505050565b611f41338383614484565b6001600160a01b0381166000908152601c6020908152604091829020805483518184028101840190945280845260609392830182828015612dc357602002820191906000526020600020905b8154815260200190600101908083116134075750505050509050919050565b6134303383613eaa565b61344c5760405162461bcd60e51b81526004016109d790615c8f565b61345884848484614552565b50505050565b6001600160a01b0383166000908152601260205260408120805482919061348490615afd565b90506000036134cb5760405162461bcd60e51b8152602060048201526013602482015272155cd95c881b9bdd081c9959da5cdd195c9959606a1b60448201526064016109d7565b6001600160a01b038516600090815260126020526040808220815160e081019092528054829082906134fc90615afd565b80601f016020809104026020016040519081016040528092919081815260200182805461352890615afd565b80156135755780601f1061354a57610100808354040283529160200191613575565b820191906000526020600020905b81548152906001019060200180831161355857829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b031660408201526003820180546060909201916135af90615afd565b80601f01602080910402602001604051908101604052809291908181526020018280546135db90615afd565b80156136285780601f106135fd57610100808354040283529160200191613628565b820191906000526020600020905b81548152906001019060200180831161360b57829003601f168201915b5050509183525050600482015460ff16151560208201526005820154604082015260068201805460609092019161365e90615afd565b80601f016020809104026020016040519081016040528092919081815260200182805461368a90615afd565b80156136d75780601f106136ac576101008083540402835291602001916136d7565b820191906000526020600020905b8154815290600101906020018083116136ba57829003601f168201915b505050505081525050905060006136f2826000015187614585565b9050600061370e8360200151613709886020015190565b6145de565b905081801561371a5750805b836080015194509450505050935093915050565b6060610e2b82614618565b60606000613746600f5490565b9050600060015b82811161378e5760008181526019602052604090206007015460ff161561377c578161377881615cdc565b9250505b8061378681615cdc565b91505061374d565b506000816001600160401b038111156137a9576137a9615215565b6040519080825280602002602001820160405280156137e257816020015b6137cf615168565b8152602001906001900390816137c75790505b509050600060015b8481116112df5760008181526019602052604090206007015460ff16156139d75760196000828152602001908152602001600020604051806101a00160405290816000820154815260200160018201805461384490615afd565b80601f016020809104026020016040519081016040528092919081815260200182805461387090615afd565b80156138bd5780601f10613892576101008083540402835291602001916138bd565b820191906000526020600020905b8154815290600101906020018083116138a057829003601f168201915b505050918352505060028201546001600160a01b0390811660208084019190915260038401546040808501919091526004850154606085015260058501549092166080840152600684015460a0840152600784015460ff808216151560c08601526101009182900416151560e08501526008850154908401526009840154610120840152600a8401805483518184028101840190945280845261014090940193909183018282801561399857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161397a575b50505050508152602001600b820154815250508383815181106139bd576139bd615cf5565b602002602001018190525081806139d390615cdc565b9250505b806139e181615cdc565b9150506137ea565b60608060006060600060126000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060e0016040529081600082018054613a3290615afd565b80601f0160208091040260200160405190810160405280929190818152602001828054613a5e90615afd565b8015613aab5780601f10613a8057610100808354040283529160200191613aab565b820191906000526020600020905b815481529060010190602001808311613a8e57829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b03166040820152600382018054606090920191613ae590615afd565b80601f0160208091040260200160405190810160405280929190818152602001828054613b1190615afd565b8015613b5e5780601f10613b3357610100808354040283529160200191613b5e565b820191906000526020600020905b815481529060010190602001808311613b4157829003601f168201915b5050509183525050600482015460ff161515602082015260058201546040820152600682018054606090920191613b9490615afd565b80601f0160208091040260200160405190810160405280929190818152602001828054613bc090615afd565b8015613c0d5780601f10613be257610100808354040283529160200191613c0d565b820191906000526020600020905b815481529060010190602001808311613bf057829003601f168201915b50505050508152505090508060800151613c695760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420616e206163637265646974696e6720696e737469747574696f6e000060448201526064016109d7565b8051606082015160a083015160c09093015191989097509195509350915050565b3360009081526012602052604090206004015460ff16613cec5760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420616e206163637265646974696e6720696e737469747574696f6e000060448201526064016109d7565b6000815111613d3d5760405162461bcd60e51b815260206004820152601b60248201527f41737365737320696e666f2063616e6e6f7420626520656d707479000000000060448201526064016109d7565b336000908152601260205260409020600601611f418282615bae565b613d61613f3d565b6001600160a01b038116613dc65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109d7565b613dcf816143cd565b50565b6000610e2b82614713565b6000818152600460205260409020546001600160a01b0316613dcf5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016109d7565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190613e718261235f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080613eb68361235f565b9050806001600160a01b0316846001600160a01b03161480613efd57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b80613f215750836001600160a01b0316613f1684610ec3565b6001600160a01b0316145b949350505050565b613f34838383614738565b610ffa81614203565b600d546001600160a01b031633146119605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109d7565b611f418282604051806020016040528060008152506148a9565b6000828152600460205260409020546001600160a01b031661402c5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016109d7565b6000828152600c602052604090206140448282615bae565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6127106001600160601b03821611156140ea5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016109d7565b6001600160a01b0382166141405760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016109d7565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b6060604051806060016040528060228152602001615f0d60229139905090565b6002600e54036141fc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109d7565b6002600e55565b6000818152601b60205260408120905b81548110156143b557600082828154811061423057614230615cf5565b6000918252602080832090910154868352601a825260408084206001600160a01b0390921680855291909252908220805460ff1916905591505b6001600160a01b0382166000908152601c60205260409020548110156143a0576001600160a01b0382166000908152601c602052604090208054869190839081106142b7576142b7615cf5565b90600052602060002001540361438e576001600160a01b0382166000908152601c6020526040902080546142ed90600190615d73565b815481106142fd576142fd615cf5565b9060005260206000200154601c6000846001600160a01b03166001600160a01b03168152602001908152602001600020828154811061433e5761433e615cf5565b60009182526020808320909101929092556001600160a01b0384168152601c9091526040902080548061437357614373615d86565b600190038181906000526020600020016000905590556143a0565b8061439881615cdc565b91505061426a565b505080806143ad90615cdc565b915050614213565b506000828152601b60205260408120611f41916151e6565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805b835181101561447a57826001600160a01b031684828151811061444857614448615cf5565b60200260200101516001600160a01b031603614468576001915050610e2b565b8061447281615cdc565b915050614423565b5060009392505050565b816001600160a01b0316836001600160a01b0316036144e55760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109d7565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61455d848484613f29565b614569848484846148dc565b6134585760405162461bcd60e51b81526004016109d790615ddf565b6000816040516020016145989190615e31565b60405160208183030381529060405280519060200120836040516020016145bf9190615e31565b6040516020818303038152906040528051906020012014905092915050565b6000816040516020016145f391815260200190565b60408051601f19818403018152828252805160209182012090830186905291016145bf565b606061462382613ddd565b6000828152600c60205260408120805461463c90615afd565b80601f016020809104026020016040519081016040528092919081815260200182805461466890615afd565b80156146b55780601f1061468a576101008083540402835291602001916146b5565b820191906000526020600020905b81548152906001019060200180831161469857829003601f168201915b5050505050905060006146c661418a565b905080516000036146d8575092915050565b81511561470a5780826040516020016146f2929190615d44565b60405160208183030381529060405292505050919050565b613f21846149dd565b60006001600160e01b03198216632483248360e11b1480610e2b5750610e2b82614a44565b826001600160a01b031661474b8261235f565b6001600160a01b0316146147715760405162461bcd60e51b81526004016109d790615e4d565b6001600160a01b0382166147d35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109d7565b6147e08383836001614a69565b826001600160a01b03166147f38261235f565b6001600160a01b0316146148195760405162461bcd60e51b81526004016109d790615e4d565b600081815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260058552838620805460001901905590871680865283862080546001019055868652600490945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6148b38383614a75565b6148c060008484846148dc565b610ffa5760405162461bcd60e51b81526004016109d790615ddf565b60006001600160a01b0384163b156149d257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614920903390899088908890600401615e92565b6020604051808303816000875af192505050801561495b575060408051601f3d908101601f1916820190925261495891810190615ecf565b60015b6149b8573d808015614989576040519150601f19603f3d011682016040523d82523d6000602084013e61498e565b606091505b5080516000036149b05760405162461bcd60e51b81526004016109d790615ddf565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613f21565b506001949350505050565b60606149e882613ddd565b60006149f261418a565b90506000815111614a125760405180602001604052806000815250614a3d565b80614a1c84614c0e565b604051602001614a2d929190615d44565b6040516020818303038152906040525b9392505050565b60006001600160e01b0319821663780e9d6360e01b1480610e2b5750610e2b82614ca0565b61345884848484614ce0565b6001600160a01b038216614acb5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109d7565b6000818152600460205260409020546001600160a01b031615614b305760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109d7565b614b3e600083836001614a69565b6000818152600460205260409020546001600160a01b031615614ba35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109d7565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60606000614c1b83614e14565b60010190506000816001600160401b03811115614c3a57614c3a615215565b6040519080825280601f01601f191660200182016040528015614c64576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084614c6e57509392505050565b60006001600160e01b031982166380ac58cd60e01b1480614cd157506001600160e01b03198216635b5e139f60e01b145b80610e2b5750610e2b82614eec565b6001811115614d4f5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b60648201526084016109d7565b816001600160a01b038516614dab57614da681600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b614dce565b836001600160a01b0316856001600160a01b031614614dce57614dce8582614f21565b6001600160a01b038416614dea57614de581614fbe565b614e0d565b846001600160a01b0316846001600160a01b031614614e0d57614e0d848261506d565b5050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310614e535772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614e7f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614e9d57662386f26fc10000830492506010015b6305f5e1008310614eb5576305f5e100830492506008015b6127108310614ec957612710830492506004015b60648310614edb576064830492506002015b600a8310610e2b5760010192915050565b60006001600160e01b0319821663152a902d60e11b1480610e2b57506301ffc9a760e01b6001600160e01b0319831614610e2b565b60006001614f2e846127f6565b614f389190615d73565b600083815260096020526040902054909150808214614f8b576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090614fd090600190615d73565b6000838152600b6020526040812054600a8054939450909284908110614ff857614ff8615cf5565b9060005260206000200154905080600a838154811061501957615019615cf5565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a80548061505157615051615d86565b6001900381819060005260206000200160009055905550505050565b6000615078836127f6565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b604051806101000160405280600081526020016000815260200160006001600160a01b031681526020016000151581526020016060815260200160001515815260200160008152602001606081525090565b828054828255906000526020600020908101928215615158579160200282015b8281111561515857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190615123565b50615164929150615200565b5090565b604051806101a00160405280600081526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600015158152602001600015158152602001600081526020016000815260200160608152602001600081525090565b5080546000825590600052602060002090810190613dcf91905b5b808211156151645760008155600101615201565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561524557615245615215565b604051601f8501601f19908116603f0116810190828211818310171561526d5761526d615215565b8160405280935085815286868601111561528657600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126152b157600080fd5b614a3d8383356020850161522b565b600080604083850312156152d357600080fd5b8235915060208301356001600160401b038111156152f057600080fd5b6152fc858286016152a0565b9150509250929050565b6001600160e01b031981168114613dcf57600080fd5b60006020828403121561532e57600080fd5b8135614a3d81615306565b60005b8381101561535457818101518382015260200161533c565b50506000910152565b60008151808452615375816020860160208601615339565b601f01601f19169290920160200192915050565b602081526000614a3d602083018461535d565b6000602082840312156153ae57600080fd5b5035919050565b80356001600160a01b03811681146153cc57600080fd5b919050565b600080604083850312156153e457600080fd5b6153ed836153b5565b946020939093013593505050565b6000806040838503121561540e57600080fd5b8235915061541e602084016153b5565b90509250929050565b60008060006060848603121561543c57600080fd5b615445846153b5565b9250615453602085016153b5565b9150604084013590509250925092565b600081518084526020808501945080840160005b8381101561549c5781516001600160a01b031687529582019590820190600101615477565b509495945050505050565b6000610100825184526020830151602085015260018060a01b03604084015116604085015260608301511515606085015260808301518160808601526154ef8286018261535d565b91505060a083015161550560a086018215159052565b5060c083015160c085015260e083015184820360e08601526155278282615463565b95945050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561162557603f198886030184526155738583516154a7565b94509285019290850190600101615557565b6000806040838503121561559857600080fd5b50508035926020909101359150565b6000806000606084860312156155bc57600080fd5b6155c5846153b5565b925060208401356001600160401b038111156155e057600080fd5b6155ec868287016152a0565b92505060408401356001600160601b038116811461560957600080fd5b809150509250925092565b803580151581146153cc57600080fd5b6000806040838503121561563757600080fd5b8235915061541e60208401615614565b602081526000614a3d60208301846154a7565b60006020828403121561566c57600080fd5b614a3d826153b5565b608081526000615688608083018761535d565b85602084015282810360408401526156a0818661535d565b91505082606083015295945050505050565b60006101a08251845260208301518160208601526156d28286018261535d565b91505060408301516156ef60408601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015161571e60a08601826001600160a01b03169052565b5060c083015160c085015260e083015161573c60e086018215159052565b50610100838101511515908501526101208084015190850152610140808401519085015261016080840151858303828701526157788382615463565b61018095860151969095019590955250919392505050565b602081526000614a3d60208301846156b2565b600080600080608085870312156157b957600080fd5b8435935060208501356001600160401b038111156157d657600080fd5b6157e2878288016152a0565b949794965050505060408301359260600135919050565b602081526000614a3d6020830184615463565b6020808252825182820181905260009190848201906040850190845b8181101561584457835183529284019291840191600101615828565b50909695505050505050565b6000806000806080858703121561586657600080fd5b84356001600160401b038082111561587d57600080fd5b615889888389016152a0565b9550602087013591508082111561589f57600080fd5b6158ab888389016152a0565b945060408701359150808211156158c157600080fd5b506158ce878288016152a0565b9250506158dd60608601615614565b905092959194509250565b600080604083850312156158fb57600080fd5b615904836153b5565b915061541e60208401615614565b6000806000806080858703121561592857600080fd5b615931856153b5565b935061593f602086016153b5565b92506040850135915060608501356001600160401b0381111561596157600080fd5b8501601f8101871361597257600080fd5b6159818782356020840161522b565b91505092959194509250565b6000806000606084860312156159a257600080fd5b6159ab846153b5565b925060208401356001600160401b03808211156159c757600080fd5b6159d3878388016152a0565b935060408601359150808211156159e957600080fd5b506159f6868287016152a0565b9150509250925092565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561162557603f19888603018452615a438583516156b2565b94509285019290850190600101615a27565b608081526000615a68608083018761535d565b8281036020840152615a7a818761535d565b90508460408401528281036060840152615a94818561535d565b979650505050505050565b600060208284031215615ab157600080fd5b81356001600160401b03811115615ac757600080fd5b613f21848285016152a0565b60008060408385031215615ae657600080fd5b615aef836153b5565b915061541e602084016153b5565b600181811c90821680615b1157607f821691505b602082108103615b3157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e2b57610e2b615b37565b601f821115610ffa57600081815260208120601f850160051c81016020861015615b875750805b601f850160051c820191505b81811015615ba657828155600101615b93565b505050505050565b81516001600160401b03811115615bc757615bc7615215565b615bdb81615bd58454615afd565b84615b60565b602080601f831160018114615c105760008415615bf85750858301515b600019600386901b1c1916600185901b178555615ba6565b600085815260208120601f198616915b82811015615c3f57888601518255948401946001909101908401615c20565b5085821015615c5d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000615c80604083018561535d565b90508260208301529392505050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600060018201615cee57615cee615b37565b5060010190565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417610e2b57610e2b615b37565b600082615d3f57634e487b7160e01b600052601260045260246000fd5b500490565b60008351615d56818460208801615339565b835190830190615d6a818360208801615339565b01949350505050565b81810381811115610e2b57610e2b615b37565b634e487b7160e01b600052603160045260246000fd5b60208082526023908201527f596f7520617265206e6f7420746865206f776e6572206f7220617574686f72696040820152621e995960ea1b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008251615e43818460208701615339565b9190910192915050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615ec59083018461535d565b9695505050505050565b600060208284031215615ee157600080fd5b8151614a3d8161530656fedcabf311e00ee82b128993d7cd81f7eb6f0d5f2825a27cc50f176c8e3cc5777f68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732fa2646970667358221220ae61faf3f2a4b14a0344d0d98f2de9927424408cd07722c7f27b8daed50fc6c264736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102ae5760003560e01c806368828489116101755780639ef1d46f116100dc578063cbd2bdfd11610095578063d956d18f1161006f578063d956d18f146108bc578063deb82ed9146108dc578063e985e9c5146108f2578063f2fde38b1461093b57600080fd5b8063cbd2bdfd1461083a578063d5809a111461085c578063d8be30fc1461088c57600080fd5b80639ef1d46f14610763578063a22cb46514610783578063b272f940146107a3578063b88d4fde146107c3578063bf06eda6146107e3578063c87b56dd1461081a57600080fd5b80638da5cb5b1161012e5780638da5cb5b146106bb5780638edb3390146106d957806395d89b41146106ec5780639640b49214610701578063997572ea1461072e5780639979ef451461075057600080fd5b806368828489146105dc5780636f1a0af5146105fc5780636f77926b1461062957806370a0823114610659578063715018a61461067957806378bd79351461068e57600080fd5b80632cd8bf8411610219578063476343ee116101d2578063476343ee1461053157806347afe4371461054657806349731a0f146105665780634f6ccce71461058657806360c6d8ae146105a65780636352211e146105bc57600080fd5b80632cd8bf841461047e5780632f745c591461049e57806332a2c5d0146104be5780633877248d146104d157806342842e0e146104f157806342b83cf51461051157600080fd5b80630a3f70091161026b5780630a3f7009146103a857806318160ddd146103c857806323b872dd146103dd57806328858720146103fd5780632a55205a1461041f5780632af356c21461045e57600080fd5b806301782f15146102b357806301ffc9a7146102d557806306fdde031461030a578063081812fc1461032c5780630888de3914610364578063095ea7b314610388575b600080fd5b3480156102bf57600080fd5b506102d36102ce3660046152c0565b61095b565b005b3480156102e157600080fd5b506102f56102f036600461531c565b610e20565b60405190151581526020015b60405180910390f35b34801561031657600080fd5b5061031f610e31565b6040516103019190615389565b34801561033857600080fd5b5061034c61034736600461539c565b610ec3565b6040516001600160a01b039091168152602001610301565b34801561037057600080fd5b5061037a60185481565b604051908152602001610301565b34801561039457600080fd5b506102d36103a33660046153d1565b610eea565b3480156103b457600080fd5b506102f56103c33660046153fb565b610fff565b3480156103d457600080fd5b50600a5461037a565b3480156103e957600080fd5b506102d36103f8366004615427565b61102a565b34801561040957600080fd5b5061041261105b565b6040516103019190615530565b34801561042b57600080fd5b5061043f61043a366004615585565b6112e9565b604080516001600160a01b039093168352602083019190915201610301565b34801561046a57600080fd5b506102d361047936600461539c565b611395565b34801561048a57600080fd5b5061037a61049936600461539c565b61142a565b3480156104aa57600080fd5b5061037a6104b93660046153d1565b611447565b3480156104ca57600080fd5b503061034c565b3480156104dd57600080fd5b5061037a6104ec3660046155a7565b6114dd565b3480156104fd57600080fd5b506102d361050c366004615427565b611632565b34801561051d57600080fd5b506102d361052c3660046153fb565b61164d565b34801561053d57600080fd5b506102d3611807565b34801561055257600080fd5b506102d3610561366004615585565b611962565b34801561057257600080fd5b506102d36105813660046153fb565b611f45565b34801561059257600080fd5b5061037a6105a136600461539c565b6122cc565b3480156105b257600080fd5b5061037a60115481565b3480156105c857600080fd5b5061034c6105d736600461539c565b61235f565b3480156105e857600080fd5b506102d36105f7366004615624565b6123bf565b34801561060857600080fd5b5061061c61061736600461539c565b612422565b6040516103019190615647565b34801561063557600080fd5b5061064961064436600461565a565b6125a5565b6040516103019493929190615675565b34801561066557600080fd5b5061037a61067436600461565a565b6127f6565b34801561068557600080fd5b506102d361287c565b34801561069a57600080fd5b506106ae6106a936600461539c565b61288e565b6040516103019190615790565b3480156106c757600080fd5b50600d546001600160a01b031661034c565b6102d36106e73660046157a3565b612a3d565b3480156106f857600080fd5b5061031f612d54565b34801561070d57600080fd5b5061072161071c36600461539c565b612d63565b60405161030191906157f9565b34801561073a57600080fd5b50610743612dcf565b604051610301919061580c565b6102d361075e36600461539c565b612e2f565b34801561076f57600080fd5b506102d361077e366004615850565b613258565b34801561078f57600080fd5b506102d361079e3660046158e8565b6133b0565b3480156107af57600080fd5b506107436107be36600461565a565b6133bb565b3480156107cf57600080fd5b506102d36107de366004615912565b613426565b3480156107ef57600080fd5b506108036107fe36600461598d565b61345e565b604080519215158352901515602083015201610301565b34801561082657600080fd5b5061031f61083536600461539c565b61372e565b34801561084657600080fd5b5061084f613739565b6040516103019190615a00565b34801561086857600080fd5b5061037a61087736600461539c565b60009081526015602052604090206005015490565b34801561089857600080fd5b506108ac6108a736600461565a565b6139e9565b6040516103019493929190615a55565b3480156108c857600080fd5b506102d36108d7366004615a9f565b613c8a565b3480156108e857600080fd5b5061037a6103e881565b3480156108fe57600080fd5b506102f561090d366004615ad3565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561094757600080fd5b506102d361095636600461565a565b613d59565b3360009081526012602052604090206004015460ff166109e05760405162461bcd60e51b815260206004820152603560248201527f4f6e6c79206163637265646974696e6720696e737469747574696f6e7320636160448201527437103832b93337b936903a3434b99030b1ba34b7b760591b60648201526084015b60405180910390fd5b33600090815260126020526040812060060180546109fd90615afd565b905011610a585760405162461bcd60e51b8152602060048201526024808201527f41636372656469746174696f6e20696e666f206d75737420626520636f6d706c604482015263195d195960e21b60648201526084016109d7565b60008281526015602052604090206004015460ff16610ab95760405162461bcd60e51b815260206004820181905260248201527f4e4654206973206e6f742073657420666f722061636372656469746174696f6e60448201526064016109d7565b600082815260156020908152604082206006810180546001818101835591855292842090920180546001600160a01b03191633179055848352600501805491929091610b06908490615b4d565b9091555050336000908152601260205260408120600501805460019290610b2e908490615b4d565b909155505060408051838152600160208201524281830152905133917fc424236d12197e1ec7bea17e53f7631b14e52d78ce30527c0337514923afe0e0919081900360600190a26040805160a0810182523360009081526012602052919091208054829190610b9c90615afd565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc890615afd565b8015610c155780601f10610bea57610100808354040283529160200191610c15565b820191906000526020600020905b815481529060010190602001808311610bf857829003601f168201915b50505091835250506020808201859052604080830185905233606084018190524260809094019390935260009283526013909152902081518190610c599082615bae565b506020820151600182015560408201516002820190610c789082615bae565b5060608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080909101516004909101556040805160a0810182523360009081526012602052919091208054829190610cd290615afd565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfe90615afd565b8015610d4b5780601f10610d2057610100808354040283529160200191610d4b565b820191906000526020600020905b815481529060010190602001808311610d2e57829003601f168201915b50505091835250506020808201859052604080830185905233606084015242608090930192909252600085815260149091522081518190610d8c9082615bae565b506020820151600182015560408201516002820190610dab9082615bae565b5060608201516003820180546001600160a01b0319166001600160a01b03909216919091179055608090910151600490910155604051339083907f663aef1797b13c8d11ad351eb974b24dfd1690b5aa6e3af8d11c7cca7fb5fea390610e149085904290615c6d565b60405180910390a35050565b6000610e2b82613dd2565b92915050565b606060028054610e4090615afd565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6c90615afd565b8015610eb95780601f10610e8e57610100808354040283529160200191610eb9565b820191906000526020600020905b815481529060010190602001808311610e9c57829003601f168201915b5050505050905090565b6000610ece82613ddd565b506000908152600660205260409020546001600160a01b031690565b6000610ef58261235f565b9050806001600160a01b0316836001600160a01b031603610f625760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016109d7565b336001600160a01b0382161480610f7e5750610f7e813361090d565b610ff05760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016109d7565b610ffa8383613e3c565b505050565b6000918252601a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6110343382613eaa565b6110505760405162461bcd60e51b81526004016109d790615c8f565b610ffa838383613f29565b60606000611068600f5490565b9050600060015b8281116110b05760008181526015602052604090206004015460ff161561109e578161109a81615cdc565b9250505b806110a881615cdc565b91505061106f565b506000816001600160401b038111156110cb576110cb615215565b60405190808252806020026020018201604052801561110457816020015b6110f16150b1565b8152602001906001900390816110e95790505b509050600060015b8481116112df5760008181526015602052604090206004015460ff16156112cd576000818152601560209081526040918290208251610100810184528154815260018201549281019290925260028101546001600160a01b03811693830193909352600160a01b90920460ff161515606082015260038201805491929160808401919061119890615afd565b80601f01602080910402602001604051908101604052809291908181526020018280546111c490615afd565b80156112115780601f106111e657610100808354040283529160200191611211565b820191906000526020600020905b8154815290600101906020018083116111f457829003601f168201915b505050505081526020016004820160009054906101000a900460ff16151515158152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561129857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161127a575b5050505050815250508383815181106112b3576112b3615cf5565b602002602001018190525081806112c990615cdc565b9250505b806112d781615cdc565b91505061110c565b5090949350505050565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b031692820192909252829161135e5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061137d906001600160601b031687615d0b565b6113879190615d22565b915196919550909350505050565b61139d613f3d565b6103e88111156113ef5760405162461bcd60e51b815260206004820152601e60248201527f45786365656473206d6178696d756d206665652070657263656e74616765000060448201526064016109d7565b60188190556040518181527f7b7b531d40c1aa89dac7360f225e5660c63799638af64655583d3ec191be11e29060200160405180910390a150565b60006127106018548361143d9190615d0b565b610e2b9190615d22565b6000611452836127f6565b82106114b45760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016109d7565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b60006114ed600f80546001019055565b60006114f8600f5490565b90506115048582613f97565b61150e8185613fb1565b61151981338561407c565b600061152361418a565b85604051602001611535929190615d44565b60408051808303601f19018152610100830182528483526000602080850182815233868601908152606087018481526080880186815260a0890186905260c089018690528751868152808601895260e08a01528a86526015909452959093208651815590516001820155915160028301805495511515600160a01b026001600160a81b03199096166001600160a01b039092169190911794909417909355915190935060038201906115e79082615bae565b5060a082015160048201805460ff191691151591909117905560c0820151600582015560e08201518051611625916006840191602090910190615103565b5092979650505050505050565b610ffa83838360405180602001604052806000815250613426565b336116578361235f565b6001600160a01b0316146116a35760405162461bcd60e51b81526020600482015260136024820152722737ba103a3432903a37b5b2b71037bbb732b960691b60448201526064016109d7565b6001600160a01b0381166116f05760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642075736572206164647265737360601b60448201526064016109d7565b6000828152601a602090815260408083206001600160a01b038516845290915290205460ff16156117635760405162461bcd60e51b815260206004820152601a60248201527f4164647265737320616c726561647920617574686f72697a656400000000000060448201526064016109d7565b6000828152601a602090815260408083206001600160a01b038516808552908352818420805460ff19166001908117909155868552601b8452828520805480830182559086528486200180546001600160a01b03191683179055818552601c8452828520805491820181558552928420909201859055519091339185917fff460b40c549c863c9b27df0d30952055e6a9d7ab0a5dfa776a5aca07a56e55b91a45050565b61180f613f3d565b6118176141aa565b6011548061185d5760405162461bcd60e51b81526020600482015260136024820152724e6f206665657320746f20776974686472617760681b60448201526064016109d7565b60006011819055600d546040516001600160a01b039091169083908381818185875af1925050503d80600081146118b0576040519150601f19603f3d011682016040523d82523d6000602084013e6118b5565b606091505b50509050806119065760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f207769746864726177206665657300000000000000000060448201526064016109d7565b600d546001600160a01b03166001600160a01b03167fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a8360405161194c91815260200190565b60405180910390a250506119606001600e55565b565b60008281526019602052604090206007015460ff166119bb5760405162461bcd60e51b815260206004820152601560248201527441756374696f6e206973206e6f742061637469766560581b60448201526064016109d7565b600082815260196020526040902060060154811015611a1c5760405162461bcd60e51b815260206004820152601960248201527f41756374696f6e20686173206e6f7420656e646564207965740000000000000060448201526064016109d7565b33611a268361235f565b6001600160a01b03161480611a5457506000828152601a6020908152604080832033845290915290205460ff165b611aa05760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420617574686f72697a656420746f20656e642061756374696f6e00000060448201526064016109d7565b600082815260196020526040902060078101805460ff19169055600501546001600160a01b031615611f0657600082815260196020526040902060048101546007909101548190610100900460ff1615611bca57600080611b0186856112e9565b9092509050611b108184615d73565b92508015611bc7576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611b4e573d6000803e3d6000fd5b50611b5d601080546001019055565b6001600160a01b03821630600080516020615eed8339815191528342611b8260105490565b604080516080808252600e908201526d149bde585b1d1e54185e5b595b9d60921b60a08201526020810194909452830191909152606082015260c00160405180910390a35b50505b60006064611bd984600a615d0b565b611be39190615d22565b9050611bef8183615d73565b600086815260156020908152604080832060060180548251818502810185019093528083529496509293909291830182828015611c5557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c37575b50505050509050600081511115611d8a576000815183611c759190615d22565b905060005b8251811015611d8357828181518110611c9557611c95615cf5565b60200260200101516001600160a01b03166108fc839081150290604051600060405180830381858888f19350505050158015611cd5573d6000803e3d6000fd5b50611ce4601080546001019055565b828181518110611cf657611cf6615cf5565b60200260200101516001600160a01b0316306001600160a01b0316600080516020615eed8339815191528442611d2b60105490565b6040805160808082526010908201526f41636372656469746174696f6e46656560801b60a08201526020810194909452830191909152606082015260c00160405180910390a380611d7b81615cdc565b915050611c7a565b5050611d97565b611d948284615b4d565b92505b6000868152601960205260408082206002015490516001600160a01b039091169185156108fc02918691818181858888f19350505050158015611dde573d6000803e3d6000fd5b50611ded601080546001019055565b6000868152601960205260409020600201546001600160a01b031630600080516020615eed8339815191528542611e2360105490565b60408051608080825260119082015270105d58dd1a5bdb94d95d1d1b195b595b9d607a1b60a08201526020810194909452830191909152606082015260c00160405180910390a3611e7386614203565b600086815260196020526040902060028101546005909101546001600160a01b039182169116611ea482828a613f29565b6000888152601960209081526040918290206005015482518881529182018a90526001600160a01b0316918a917fe9ba83469fc8ee4260dd274fd43b5a54f2df813ad21c4637d53084d1f3866b37910160405180910390a35050505050505050565b604080516000808252602082018490529184917fe9ba83469fc8ee4260dd274fd43b5a54f2df813ad21c4637d53084d1f3866b379101610e14565b5050565b33611f4f8361235f565b6001600160a01b031614611f9b5760405162461bcd60e51b81526020600482015260136024820152722737ba103a3432903a37b5b2b71037bbb732b960691b60448201526064016109d7565b6001600160a01b038116611fe85760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642075736572206164647265737360601b60448201526064016109d7565b6000828152601a602090815260408083206001600160a01b03851684529091528120805460ff191690555b6000838152601b6020526040902054811015612155576000838152601b6020526040902080546001600160a01b03841691908390811061205557612055615cf5565b6000918252602090912001546001600160a01b031603612143576000838152601b60205260409020805461208b90600190615d73565b8154811061209b5761209b615cf5565b6000918252602080832090910154858352601b909152604090912080546001600160a01b0390921691839081106120d4576120d4615cf5565b600091825260208083209190910180546001600160a01b0319166001600160a01b039490941693909317909255848152601b9091526040902080548061211c5761211c615d86565b600082815260209020810160001990810180546001600160a01b0319169055019055612155565b8061214d81615cdc565b915050612013565b5060005b6001600160a01b0382166000908152601c602052604090205481101561228f576001600160a01b0382166000908152601c602052604090208054849190839081106121a6576121a6615cf5565b90600052602060002001540361227d576001600160a01b0382166000908152601c6020526040902080546121dc90600190615d73565b815481106121ec576121ec615cf5565b9060005260206000200154601c6000846001600160a01b03166001600160a01b03168152602001908152602001600020828154811061222d5761222d615cf5565b60009182526020808320909101929092556001600160a01b0384168152601c9091526040902080548061226257612262615d86565b6001900381819060005260206000200160009055905561228f565b8061228781615cdc565b915050612159565b506040516001600160a01b03821690339084907fbb7a4ce7127a7634ffe548a0beabca6f4b99e9e1c9ad99ff9ade8dc94cd8317390600090a45050565b60006122d7600a5490565b821061233a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016109d7565b600a828154811061234d5761234d615cf5565b90600052602060002001549050919050565b6000818152600460205260408120546001600160a01b031680610e2b5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016109d7565b336123c98361235f565b6001600160a01b031614806123e357506123e38233610fff565b6123ff5760405162461bcd60e51b81526004016109d790615d9c565b600091825260156020526040909120600401805460ff1916911515919091179055565b61242a6150b1565b6000828152601560209081526040918290208251610100810184528154815260018201549281019290925260028101546001600160a01b03811693830193909352600160a01b90920460ff161515606082015260038201805491929160808401919061249590615afd565b80601f01602080910402602001604051908101604052809291908181526020018280546124c190615afd565b801561250e5780601f106124e35761010080835404028352916020019161250e565b820191906000526020600020905b8154815290600101906020018083116124f157829003601f168201915b505050505081526020016004820160009054906101000a900460ff16151515158152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561259557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612577575b5050505050815250509050919050565b60606000606060008060126000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060e00160405290816000820180546125ee90615afd565b80601f016020809104026020016040519081016040528092919081815260200182805461261a90615afd565b80156126675780601f1061263c57610100808354040283529160200191612667565b820191906000526020600020905b81548152906001019060200180831161264a57829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b031660408201526003820180546060909201916126a190615afd565b80601f01602080910402602001604051908101604052809291908181526020018280546126cd90615afd565b801561271a5780601f106126ef5761010080835404028352916020019161271a565b820191906000526020600020905b8154815290600101906020018083116126fd57829003601f168201915b5050509183525050600482015460ff16151560208201526005820154604082015260068201805460609092019161275090615afd565b80601f016020809104026020016040519081016040528092919081815260200182805461277c90615afd565b80156127c95780601f1061279e576101008083540402835291602001916127c9565b820191906000526020600020905b8154815290600101906020018083116127ac57829003601f168201915b50505091909252505081516020830151606084015160a090940151919a9099509297509550909350505050565b60006001600160a01b0382166128605760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016109d7565b506001600160a01b031660009081526005602052604090205490565b612884613f3d565b61196060006143cd565b612896615168565b60196000838152602001908152602001600020604051806101a0016040529081600082015481526020016001820180546128cf90615afd565b80601f01602080910402602001604051908101604052809291908181526020018280546128fb90615afd565b80156129485780601f1061291d57610100808354040283529160200191612948565b820191906000526020600020905b81548152906001019060200180831161292b57829003601f168201915b505050918352505060028201546001600160a01b0390811660208084019190915260038401546040808501919091526004850154606085015260058501549092166080840152600684015460a0840152600784015460ff808216151560c08601526101009182900416151560e08501526008850154908401526009840154610120840152600a84018054835181840281018401909452808452610140909401939091830182828015612a2357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612a05575b50505050508152602001600b820154815250509050919050565b33612a478561235f565b6001600160a01b03161480612a615750612a618433610fff565b612a7d5760405162461bcd60e51b81526004016109d790615d9c565b60008481526019602052604090206007015460ff1615612aed5760405162461bcd60e51b815260206004820152602560248201527f41756374696f6e20616c72656164792061637469766520666f722074686973206044820152643a37b5b2b760d91b60648201526084016109d7565b428111612b3c5760405162461bcd60e51b815260206004820152601f60248201527f4475726174696f6e206d7573742062652067726561746572207468616e20300060448201526064016109d7565b6000612b4885846112e9565b50905060006001600160a01b0382163314612b61575060015b6000429050604051806101a00160405280888152602001878152602001336001600160a01b031681526020018681526020016000815260200160006001600160a01b031681526020018581526020016001151581526020018315158152602001600081526020016000815260200160006001600160401b03811115612be857612be8615215565b604051908082528060200260200182016040528015612c11578160200160208202803683370190505b50815260209081018390526000898152601982526040902082518155908201516001820190612c409082615bae565b5060408201516002820180546001600160a01b039283166001600160a01b031991821617909155606084015160038401556080840151600484015560a084015160058401805491909316911617905560c0820151600682015560e08201516007820180546101008086015115150261ff00199315159390931661ffff1990911617919091179055610120820151600882015561014082015160098201556101608201518051612cf991600a840191602090910190615103565b506101809190910151600b90910155604080518681526020810186905242818301529051339189917f05f9bf100dd0ca9f37f08e0526690286d357ed7d6c5a4ac29730440b6e2dfd629181900360600190a350505050505050565b606060038054610e4090615afd565b6000818152601b6020908152604091829020805483518184028101840190945280845260609392830182828015612dc357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612da5575b50505050509050919050565b336000908152601c6020908152604091829020805483518184028101840190945280845260609392830182828015610eb957602002820191906000526020600020905b815481526020019060010190808311612e12575050505050905090565b60008181526019602052604090206007015460ff16612e885760405162461bcd60e51b815260206004820152601560248201527441756374696f6e206973206e6f742061637469766560581b60448201526064016109d7565b6000818152601960205260409020600601544210612edc5760405162461bcd60e51b8152602060048201526011602482015270105d58dd1a5bdb881a185cc8195b991959607a1b60448201526064016109d7565b6000818152601960205260409020600301543411612f485760405162461bcd60e51b815260206004820152602360248201527f426964206d75737420626520686967686572207468616e20737461727420707260448201526269636560e81b60648201526084016109d7565b6000818152601960205260409020600401543411612fbc5760405162461bcd60e51b815260206004820152602b60248201527f426964206d75737420626520686967686572207468616e2063757272656e742060448201526a1a1a59da195cdd08189a5960aa1b60648201526084016109d7565b612fca601080546001019055565b6000612fd560105490565b6000838152601960205260409020600501549091506001600160a01b03161561311257600082815260196020526040808220600581015460049091015491516001600160a01b039091169290839083908381818185875af1925050503d806000811461305d576040519150601f19603f3d011682016040523d82523d6000602084013e613062565b606091505b50509050806130b35760405162461bcd60e51b815260206004820181905260248201527f4661696c656420746f20726566756e642070726576696f75732062696464657260448201526064016109d7565b60408051608080825260099082015268109a591499599d5b9960ba1b60a08201526020810184905242818301526060810186905290516001600160a01b038516913091600080516020615eed8339815191529181900360c00190a35050505b60008281526019602052604081203460048201556005810180546001600160a01b0319163317905560090180546001929061314e908490615b4d565b9091555050600082815260196020908152604091829020600a0180548351818402810184019094528084526131c293928301828280156131b757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613199575b50505050503361441f565b61321f5760008281526019602052604081206008018054600192906131e8908490615b4d565b909155505060008281526019602090815260408220600a01805460018101825590835291200180546001600160a01b031916331790555b60408051348152426020820152339184917fcde18333b910a25ba5421e992ecee5c314e557346e94ab2ab424658bbb3707e69101610e14565b336000908152601260205260409020805461327290615afd565b1590506132c15760405162461bcd60e51b815260206004820152601760248201527f5573657220616c7265616479207265676973746572656400000000000000000060448201526064016109d7565b6040518060e001604052808581526020016132dd856020015190565b8152336020808301829052604080840187905285151560608501526000608085018190528151808401835281815260a0909501949094529183526012905290208151819061332b9082615bae565b506020820151600182015560408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201906133709082615bae565b50608082015160048201805460ff191691151591909117905560a0820151600582015560c082015160068201906133a79082615bae565b50505050505050565b611f41338383614484565b6001600160a01b0381166000908152601c6020908152604091829020805483518184028101840190945280845260609392830182828015612dc357602002820191906000526020600020905b8154815260200190600101908083116134075750505050509050919050565b6134303383613eaa565b61344c5760405162461bcd60e51b81526004016109d790615c8f565b61345884848484614552565b50505050565b6001600160a01b0383166000908152601260205260408120805482919061348490615afd565b90506000036134cb5760405162461bcd60e51b8152602060048201526013602482015272155cd95c881b9bdd081c9959da5cdd195c9959606a1b60448201526064016109d7565b6001600160a01b038516600090815260126020526040808220815160e081019092528054829082906134fc90615afd565b80601f016020809104026020016040519081016040528092919081815260200182805461352890615afd565b80156135755780601f1061354a57610100808354040283529160200191613575565b820191906000526020600020905b81548152906001019060200180831161355857829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b031660408201526003820180546060909201916135af90615afd565b80601f01602080910402602001604051908101604052809291908181526020018280546135db90615afd565b80156136285780601f106135fd57610100808354040283529160200191613628565b820191906000526020600020905b81548152906001019060200180831161360b57829003601f168201915b5050509183525050600482015460ff16151560208201526005820154604082015260068201805460609092019161365e90615afd565b80601f016020809104026020016040519081016040528092919081815260200182805461368a90615afd565b80156136d75780601f106136ac576101008083540402835291602001916136d7565b820191906000526020600020905b8154815290600101906020018083116136ba57829003601f168201915b505050505081525050905060006136f2826000015187614585565b9050600061370e8360200151613709886020015190565b6145de565b905081801561371a5750805b836080015194509450505050935093915050565b6060610e2b82614618565b60606000613746600f5490565b9050600060015b82811161378e5760008181526019602052604090206007015460ff161561377c578161377881615cdc565b9250505b8061378681615cdc565b91505061374d565b506000816001600160401b038111156137a9576137a9615215565b6040519080825280602002602001820160405280156137e257816020015b6137cf615168565b8152602001906001900390816137c75790505b509050600060015b8481116112df5760008181526019602052604090206007015460ff16156139d75760196000828152602001908152602001600020604051806101a00160405290816000820154815260200160018201805461384490615afd565b80601f016020809104026020016040519081016040528092919081815260200182805461387090615afd565b80156138bd5780601f10613892576101008083540402835291602001916138bd565b820191906000526020600020905b8154815290600101906020018083116138a057829003601f168201915b505050918352505060028201546001600160a01b0390811660208084019190915260038401546040808501919091526004850154606085015260058501549092166080840152600684015460a0840152600784015460ff808216151560c08601526101009182900416151560e08501526008850154908401526009840154610120840152600a8401805483518184028101840190945280845261014090940193909183018282801561399857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161397a575b50505050508152602001600b820154815250508383815181106139bd576139bd615cf5565b602002602001018190525081806139d390615cdc565b9250505b806139e181615cdc565b9150506137ea565b60608060006060600060126000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060e0016040529081600082018054613a3290615afd565b80601f0160208091040260200160405190810160405280929190818152602001828054613a5e90615afd565b8015613aab5780601f10613a8057610100808354040283529160200191613aab565b820191906000526020600020905b815481529060010190602001808311613a8e57829003601f168201915b50505091835250506001820154602082015260028201546001600160a01b03166040820152600382018054606090920191613ae590615afd565b80601f0160208091040260200160405190810160405280929190818152602001828054613b1190615afd565b8015613b5e5780601f10613b3357610100808354040283529160200191613b5e565b820191906000526020600020905b815481529060010190602001808311613b4157829003601f168201915b5050509183525050600482015460ff161515602082015260058201546040820152600682018054606090920191613b9490615afd565b80601f0160208091040260200160405190810160405280929190818152602001828054613bc090615afd565b8015613c0d5780601f10613be257610100808354040283529160200191613c0d565b820191906000526020600020905b815481529060010190602001808311613bf057829003601f168201915b50505050508152505090508060800151613c695760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420616e206163637265646974696e6720696e737469747574696f6e000060448201526064016109d7565b8051606082015160a083015160c09093015191989097509195509350915050565b3360009081526012602052604090206004015460ff16613cec5760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420616e206163637265646974696e6720696e737469747574696f6e000060448201526064016109d7565b6000815111613d3d5760405162461bcd60e51b815260206004820152601b60248201527f41737365737320696e666f2063616e6e6f7420626520656d707479000000000060448201526064016109d7565b336000908152601260205260409020600601611f418282615bae565b613d61613f3d565b6001600160a01b038116613dc65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109d7565b613dcf816143cd565b50565b6000610e2b82614713565b6000818152600460205260409020546001600160a01b0316613dcf5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016109d7565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190613e718261235f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080613eb68361235f565b9050806001600160a01b0316846001600160a01b03161480613efd57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b80613f215750836001600160a01b0316613f1684610ec3565b6001600160a01b0316145b949350505050565b613f34838383614738565b610ffa81614203565b600d546001600160a01b031633146119605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109d7565b611f418282604051806020016040528060008152506148a9565b6000828152600460205260409020546001600160a01b031661402c5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016109d7565b6000828152600c602052604090206140448282615bae565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6127106001600160601b03821611156140ea5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016109d7565b6001600160a01b0382166141405760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016109d7565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b6060604051806060016040528060228152602001615f0d60229139905090565b6002600e54036141fc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109d7565b6002600e55565b6000818152601b60205260408120905b81548110156143b557600082828154811061423057614230615cf5565b6000918252602080832090910154868352601a825260408084206001600160a01b0390921680855291909252908220805460ff1916905591505b6001600160a01b0382166000908152601c60205260409020548110156143a0576001600160a01b0382166000908152601c602052604090208054869190839081106142b7576142b7615cf5565b90600052602060002001540361438e576001600160a01b0382166000908152601c6020526040902080546142ed90600190615d73565b815481106142fd576142fd615cf5565b9060005260206000200154601c6000846001600160a01b03166001600160a01b03168152602001908152602001600020828154811061433e5761433e615cf5565b60009182526020808320909101929092556001600160a01b0384168152601c9091526040902080548061437357614373615d86565b600190038181906000526020600020016000905590556143a0565b8061439881615cdc565b91505061426a565b505080806143ad90615cdc565b915050614213565b506000828152601b60205260408120611f41916151e6565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805b835181101561447a57826001600160a01b031684828151811061444857614448615cf5565b60200260200101516001600160a01b031603614468576001915050610e2b565b8061447281615cdc565b915050614423565b5060009392505050565b816001600160a01b0316836001600160a01b0316036144e55760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109d7565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61455d848484613f29565b614569848484846148dc565b6134585760405162461bcd60e51b81526004016109d790615ddf565b6000816040516020016145989190615e31565b60405160208183030381529060405280519060200120836040516020016145bf9190615e31565b6040516020818303038152906040528051906020012014905092915050565b6000816040516020016145f391815260200190565b60408051601f19818403018152828252805160209182012090830186905291016145bf565b606061462382613ddd565b6000828152600c60205260408120805461463c90615afd565b80601f016020809104026020016040519081016040528092919081815260200182805461466890615afd565b80156146b55780601f1061468a576101008083540402835291602001916146b5565b820191906000526020600020905b81548152906001019060200180831161469857829003601f168201915b5050505050905060006146c661418a565b905080516000036146d8575092915050565b81511561470a5780826040516020016146f2929190615d44565b60405160208183030381529060405292505050919050565b613f21846149dd565b60006001600160e01b03198216632483248360e11b1480610e2b5750610e2b82614a44565b826001600160a01b031661474b8261235f565b6001600160a01b0316146147715760405162461bcd60e51b81526004016109d790615e4d565b6001600160a01b0382166147d35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109d7565b6147e08383836001614a69565b826001600160a01b03166147f38261235f565b6001600160a01b0316146148195760405162461bcd60e51b81526004016109d790615e4d565b600081815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260058552838620805460001901905590871680865283862080546001019055868652600490945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6148b38383614a75565b6148c060008484846148dc565b610ffa5760405162461bcd60e51b81526004016109d790615ddf565b60006001600160a01b0384163b156149d257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614920903390899088908890600401615e92565b6020604051808303816000875af192505050801561495b575060408051601f3d908101601f1916820190925261495891810190615ecf565b60015b6149b8573d808015614989576040519150601f19603f3d011682016040523d82523d6000602084013e61498e565b606091505b5080516000036149b05760405162461bcd60e51b81526004016109d790615ddf565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613f21565b506001949350505050565b60606149e882613ddd565b60006149f261418a565b90506000815111614a125760405180602001604052806000815250614a3d565b80614a1c84614c0e565b604051602001614a2d929190615d44565b6040516020818303038152906040525b9392505050565b60006001600160e01b0319821663780e9d6360e01b1480610e2b5750610e2b82614ca0565b61345884848484614ce0565b6001600160a01b038216614acb5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109d7565b6000818152600460205260409020546001600160a01b031615614b305760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109d7565b614b3e600083836001614a69565b6000818152600460205260409020546001600160a01b031615614ba35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109d7565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60606000614c1b83614e14565b60010190506000816001600160401b03811115614c3a57614c3a615215565b6040519080825280601f01601f191660200182016040528015614c64576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084614c6e57509392505050565b60006001600160e01b031982166380ac58cd60e01b1480614cd157506001600160e01b03198216635b5e139f60e01b145b80610e2b5750610e2b82614eec565b6001811115614d4f5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b60648201526084016109d7565b816001600160a01b038516614dab57614da681600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b614dce565b836001600160a01b0316856001600160a01b031614614dce57614dce8582614f21565b6001600160a01b038416614dea57614de581614fbe565b614e0d565b846001600160a01b0316846001600160a01b031614614e0d57614e0d848261506d565b5050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310614e535772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614e7f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614e9d57662386f26fc10000830492506010015b6305f5e1008310614eb5576305f5e100830492506008015b6127108310614ec957612710830492506004015b60648310614edb576064830492506002015b600a8310610e2b5760010192915050565b60006001600160e01b0319821663152a902d60e11b1480610e2b57506301ffc9a760e01b6001600160e01b0319831614610e2b565b60006001614f2e846127f6565b614f389190615d73565b600083815260096020526040902054909150808214614f8b576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090614fd090600190615d73565b6000838152600b6020526040812054600a8054939450909284908110614ff857614ff8615cf5565b9060005260206000200154905080600a838154811061501957615019615cf5565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a80548061505157615051615d86565b6001900381819060005260206000200160009055905550505050565b6000615078836127f6565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b604051806101000160405280600081526020016000815260200160006001600160a01b031681526020016000151581526020016060815260200160001515815260200160008152602001606081525090565b828054828255906000526020600020908101928215615158579160200282015b8281111561515857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190615123565b50615164929150615200565b5090565b604051806101a00160405280600081526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600015158152602001600015158152602001600081526020016000815260200160608152602001600081525090565b5080546000825590600052602060002090810190613dcf91905b5b808211156151645760008155600101615201565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561524557615245615215565b604051601f8501601f19908116603f0116810190828211818310171561526d5761526d615215565b8160405280935085815286868601111561528657600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126152b157600080fd5b614a3d8383356020850161522b565b600080604083850312156152d357600080fd5b8235915060208301356001600160401b038111156152f057600080fd5b6152fc858286016152a0565b9150509250929050565b6001600160e01b031981168114613dcf57600080fd5b60006020828403121561532e57600080fd5b8135614a3d81615306565b60005b8381101561535457818101518382015260200161533c565b50506000910152565b60008151808452615375816020860160208601615339565b601f01601f19169290920160200192915050565b602081526000614a3d602083018461535d565b6000602082840312156153ae57600080fd5b5035919050565b80356001600160a01b03811681146153cc57600080fd5b919050565b600080604083850312156153e457600080fd5b6153ed836153b5565b946020939093013593505050565b6000806040838503121561540e57600080fd5b8235915061541e602084016153b5565b90509250929050565b60008060006060848603121561543c57600080fd5b615445846153b5565b9250615453602085016153b5565b9150604084013590509250925092565b600081518084526020808501945080840160005b8381101561549c5781516001600160a01b031687529582019590820190600101615477565b509495945050505050565b6000610100825184526020830151602085015260018060a01b03604084015116604085015260608301511515606085015260808301518160808601526154ef8286018261535d565b91505060a083015161550560a086018215159052565b5060c083015160c085015260e083015184820360e08601526155278282615463565b95945050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561162557603f198886030184526155738583516154a7565b94509285019290850190600101615557565b6000806040838503121561559857600080fd5b50508035926020909101359150565b6000806000606084860312156155bc57600080fd5b6155c5846153b5565b925060208401356001600160401b038111156155e057600080fd5b6155ec868287016152a0565b92505060408401356001600160601b038116811461560957600080fd5b809150509250925092565b803580151581146153cc57600080fd5b6000806040838503121561563757600080fd5b8235915061541e60208401615614565b602081526000614a3d60208301846154a7565b60006020828403121561566c57600080fd5b614a3d826153b5565b608081526000615688608083018761535d565b85602084015282810360408401526156a0818661535d565b91505082606083015295945050505050565b60006101a08251845260208301518160208601526156d28286018261535d565b91505060408301516156ef60408601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015161571e60a08601826001600160a01b03169052565b5060c083015160c085015260e083015161573c60e086018215159052565b50610100838101511515908501526101208084015190850152610140808401519085015261016080840151858303828701526157788382615463565b61018095860151969095019590955250919392505050565b602081526000614a3d60208301846156b2565b600080600080608085870312156157b957600080fd5b8435935060208501356001600160401b038111156157d657600080fd5b6157e2878288016152a0565b949794965050505060408301359260600135919050565b602081526000614a3d6020830184615463565b6020808252825182820181905260009190848201906040850190845b8181101561584457835183529284019291840191600101615828565b50909695505050505050565b6000806000806080858703121561586657600080fd5b84356001600160401b038082111561587d57600080fd5b615889888389016152a0565b9550602087013591508082111561589f57600080fd5b6158ab888389016152a0565b945060408701359150808211156158c157600080fd5b506158ce878288016152a0565b9250506158dd60608601615614565b905092959194509250565b600080604083850312156158fb57600080fd5b615904836153b5565b915061541e60208401615614565b6000806000806080858703121561592857600080fd5b615931856153b5565b935061593f602086016153b5565b92506040850135915060608501356001600160401b0381111561596157600080fd5b8501601f8101871361597257600080fd5b6159818782356020840161522b565b91505092959194509250565b6000806000606084860312156159a257600080fd5b6159ab846153b5565b925060208401356001600160401b03808211156159c757600080fd5b6159d3878388016152a0565b935060408601359150808211156159e957600080fd5b506159f6868287016152a0565b9150509250925092565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561162557603f19888603018452615a438583516156b2565b94509285019290850190600101615a27565b608081526000615a68608083018761535d565b8281036020840152615a7a818761535d565b90508460408401528281036060840152615a94818561535d565b979650505050505050565b600060208284031215615ab157600080fd5b81356001600160401b03811115615ac757600080fd5b613f21848285016152a0565b60008060408385031215615ae657600080fd5b615aef836153b5565b915061541e602084016153b5565b600181811c90821680615b1157607f821691505b602082108103615b3157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e2b57610e2b615b37565b601f821115610ffa57600081815260208120601f850160051c81016020861015615b875750805b601f850160051c820191505b81811015615ba657828155600101615b93565b505050505050565b81516001600160401b03811115615bc757615bc7615215565b615bdb81615bd58454615afd565b84615b60565b602080601f831160018114615c105760008415615bf85750858301515b600019600386901b1c1916600185901b178555615ba6565b600085815260208120601f198616915b82811015615c3f57888601518255948401946001909101908401615c20565b5085821015615c5d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000615c80604083018561535d565b90508260208301529392505050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600060018201615cee57615cee615b37565b5060010190565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417610e2b57610e2b615b37565b600082615d3f57634e487b7160e01b600052601260045260246000fd5b500490565b60008351615d56818460208801615339565b835190830190615d6a818360208801615339565b01949350505050565b81810381811115610e2b57610e2b615b37565b634e487b7160e01b600052603160045260246000fd5b60208082526023908201527f596f7520617265206e6f7420746865206f776e6572206f7220617574686f72696040820152621e995960ea1b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008251615e43818460208701615339565b9190910192915050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615ec59083018461535d565b9695505050505050565b600060208284031215615ee157600080fd5b8151614a3d8161530656fedcabf311e00ee82b128993d7cd81f7eb6f0d5f2825a27cc50f176c8e3cc5777f68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732fa2646970667358221220ae61faf3f2a4b14a0344d0d98f2de9927424408cd07722c7f27b8daed50fc6c264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "createAuction(uint256,string,uint256,uint256)": {
        "details": "创建一个新的拍卖",
        "params": {
          "blocktime": "拍卖结束时间",
          "startPrice": "起拍价格",
          "tokenId": "NFT的Token ID"
        }
      },
      "endAuction(uint256,uint256)": {
        "details": "结束拍卖并完成交易",
        "params": {
          "tokenId": "拍卖的NFT的Token ID"
        }
      },
      "getAllAuctions()": {
        "details": "获取所有拍卖的详细信息",
        "returns": {
          "_0": "所有拍卖的详细信息数组"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getAuction(uint256)": {
        "details": "获取拍卖的详细信息",
        "params": {
          "tokenId": "拍卖的NFT的Token ID"
        },
        "returns": {
          "_0": "拍卖的详细信息"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "placeBid(uint256)": {
        "details": "参与拍卖出价",
        "params": {
          "tokenId": "拍卖的NFT的Token ID"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1916,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)1913_storage"
      },
      {
        "astId": 1921,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1913_storage)"
      },
      {
        "astId": 250,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 252,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 256,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 260,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 264,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 270,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1300,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1304,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1307,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1311,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1701,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owner",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 170,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_status",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3795,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Counter)2463_storage"
      },
      {
        "astId": 3798,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_transactionCounter",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(Counter)2463_storage"
      },
      {
        "astId": 3800,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "totalFeesCollected",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3985,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_users",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(User)3969_storage)"
      },
      {
        "astId": 3990,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_Accreditings",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(Accrediting)3980_storage)"
      },
      {
        "astId": 3995,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_AccreditById",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(Accrediting)3980_storage)"
      },
      {
        "astId": 4238,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_idToNftItem",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_struct(NftItem)4233_storage)"
      },
      {
        "astId": 4241,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_listedTokenIds",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4245,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenIdToListedIndex",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4248,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "listingFeePercentage",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 4848,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_auctions",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_struct(Auction)4843_storage)"
      },
      {
        "astId": 4854,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_auctionAuthorized",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4859,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_authorizedAddresses",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 4864,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_addressToAuthorizedTokenIds",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Accrediting)3980_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YourCollectible.Accrediting)",
        "numberOfBytes": "32",
        "value": "t_struct(Accrediting)3980_storage"
      },
      "t_mapping(t_address,t_struct(User)3969_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YourCollectible.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)3969_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Accrediting)3980_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.Accrediting)",
        "numberOfBytes": "32",
        "value": "t_struct(Accrediting)3980_storage"
      },
      "t_mapping(t_uint256,t_struct(Auction)4843_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)4843_storage"
      },
      "t_mapping(t_uint256,t_struct(NftItem)4233_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.NftItem)",
        "numberOfBytes": "32",
        "value": "t_struct(NftItem)4233_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1913_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1913_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Accrediting)3980_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.Accrediting",
        "members": [
          {
            "astId": 3971,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3973,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3975,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "messages",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3977,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3979,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "time",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Auction)4843_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.Auction",
        "members": [
          {
            "astId": 4817,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4819,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4821,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 4823,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "startPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4825,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "highestBid",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4827,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "highestBidder",
            "offset": 0,
            "slot": "5",
            "type": "t_address_payable"
          },
          {
            "astId": 4829,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "endTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4831,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isActive",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 4833,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isroyalty",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 4835,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "num",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4837,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "bidCount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4840,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "bidders",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4842,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "startTime",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Counter)2463_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2462,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(NftItem)4233_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.NftItem",
        "members": [
          {
            "astId": 4217,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4219,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4221,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 4223,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isListed",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 4225,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "tokenUri",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4227,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isAccredited",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 4229,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "accreditedCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4232,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "accreditedInstitutions",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoyaltyInfo)1913_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1910,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1912,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(User)3969_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.User",
        "members": [
          {
            "astId": 3956,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3958,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "password",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 3960,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "wallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 3962,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "bio",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3964,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isAccrediting",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 3966,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "integral",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3968,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "assessUri",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}